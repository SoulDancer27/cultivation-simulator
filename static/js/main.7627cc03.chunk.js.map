{"version":3,"sources":["Themes/LightTheme.ts","GameConstants/Constants.ts","GameConstants/Items/CultivationManuals.ts","GameConstants/Player.ts","GameEngine/Player/PlayerContext.ts","GameConstants/Interfaces.ts","GameEngine/Player/playerSkills.ts","GameEngine/Player/playerStats.ts","GameConstants/Fighting/fightDps.ts","GameEngine/shared/addBaseStats.ts","GameEngine/shared/addSkillExp.ts","GameEngine/Managers/useFightManager.ts","GameEngine/shared/enemyTimesDefeated.ts","GameConstants/Activities/Trainings.ts","GameConstants/Activities/Mining.ts","GameConstants/Activities/Craft.tsx","GameConstants/Cultivation/CultivationRealms.ts","GameConstants/Activities/Gathering.ts","GameConstants/GameContent.ts","GameConstants/Fighting/Enemies.ts","GameEngine/GameContext/GameContext.ts","GameEngine/shared/calculateMaxActions.ts","GameConstants/Activities/Crafting/quality.ts","GameConstants/Activities/Crafting/power.ts","GameConstants/Items/Treasures.ts","GameConstants/Activities/Crafting/CraftTreasure.ts","GameConstants/Activities/Crafting/index.ts","GameConstants/Activities/Crafting/CraftingFunctions.ts","GameConstants/Items/Herbs.ts","GameConstants/Items/Minerals.ts","GameConstants/Items/Money.ts","GameConstants/Activities/ActivitiesFunctions.ts","GameEngine/Managers/useActivityManager.ts","GameEngine/shared/calculateTimesCompleted.ts","GameEngine/shared/calculateRealmPower.ts","GameEngine/shared/calculateTribulationPower.ts","GameEngine/GameRuntime.tsx","GameEngine/Managers/useAgeManager.ts","GameEngine/Managers/useDefaultRegenManager.ts","GameEngine/Managers/useCultivationManager.ts","GameEngine/Managers/useBreakthroughManager.ts","Utils/useWindowDimensions.ts","GameEngine/Player/PlayerStatsDictionary.ts","GameEngine/Player/playerCurrentStats.ts","Components/TopBar.tsx","Components/LeftSideBar/PlayerStatsPane/HealthBar.tsx","Components/shared/HtmlTooltip.tsx","Components/LeftSideBar/PlayerStatsPane/StatDetailsTooltip.tsx","Components/LeftSideBar/PlayerStatsPane.tsx","GameConstants/Villages.ts","Utils/getSpacing.ts","Components/LeftSideBar/PlayerLocationPane.tsx","Components/shared/CropImage.tsx","Components/LeftSideBar/PlayerStatsLayout/Equipment/EquipmentCard.tsx","Components/LeftSideBar/PlayerStatsLayout/Equipment.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryBottomPanel.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryFilters.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryGrid/EmptyCell.tsx","Components/shared/LockIcon.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryGrid/InventoryTreasureItem.tsx","GameConstants/utils/findItemDescription.ts","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryGrid/InventoryCountableItem.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryGrid/InventoryGridItem.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/InventoryGrid.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory/AutosellPanel.tsx","Components/LeftSideBar/PlayerStatsLayout/Inventory.tsx","Components/LeftSideBar/PlayerStatsLayout/Stats.tsx","Components/LeftSideBar/PlayerStatsLayout/Skills/SkillDetailTooltip.tsx","Components/LeftSideBar/PlayerStatsLayout/Skills.tsx","Components/LeftSideBar/PlayerStatsLayout.tsx","Components/LeftSideBar.tsx","Components/shared/ProgressBar.tsx","Utils/parseTime.ts","Components/shared/ActivityStatsDescription.tsx","Components/shared/ItemImages.tsx","Components/ActivityCards/GatheringActivity.tsx","Pages/ActionsPage.tsx","Components/shared/ItemDescriptions.tsx","Pages/CraftingPage/TreasureTooltip.tsx","Components/ItemGrid/GridItem.tsx","Components/ItemGrid/EmptyCell.tsx","Components/ItemGrid.tsx","Components/ItemGrid/BasicGridCell.tsx","Pages/CraftingPage/ResultItemDescription.tsx","Pages/CraftingPage/ActiveItem.tsx","Pages/CraftingPage/PriceMultiplier.tsx","Pages/CraftingPage/TreasureCell.tsx","Pages/CraftingPage.tsx","Pages/FightingPage/EnemyRow.tsx","Pages/FightingPage/EnemyTooltip.tsx","Pages/FightingPage.tsx","Pages/CultivationPage/ActiveManual.tsx","Pages/CultivationPage/EquippedManuals/EquippedManualCard.tsx","Pages/CultivationPage/EquippedManuals/PlaceholderCard.tsx","Pages/CultivationPage/EquippedManuals.tsx","Pages/CultivationPage/ManualsList.tsx","Pages/ManualsPage.tsx","Pages/RealmBreakthroughPage/BreakthroughAnimation.tsx","Pages/RealmBreakthroughPage/Placeholder.tsx","Pages/RealmBreakthroughPage/calculateMaxTribulationStage.ts","Pages/RealmBreakthroughPage.tsx","Pages/ShopsPage/ManualsShop/ManualCell.tsx","Pages/ShopsPage/ManualsShop/ManualTooltip.tsx","Pages/ShopsPage/ManualsShop.tsx","Pages/ShopsPage.tsx","Components/shared/useComponentSelector.tsx","Components/ActivityCards/Activity.tsx","Pages/RealmBreakthroughPage/breakthroughSuccess.ts","App.tsx","index.tsx"],"names":["LightTheme","responsiveFontSizes","createTheme","palette","background","default","paper","defaultUpdateInterval","year","month","day","CultivationManuals","name","realm","rarity","price","type","amount","image","path","x","y","sizeX","sizeY","maxLevel","stats","attack","defence","health","healthRegen","skills","training","levelExp","level","totalExp","baseStats","insight","playerSkills","mining","crafting","gathering","PlayerEquipment","playerContext","_objectSpread","age","currentStats","baseSkills","index","power","manuals","map","manual","learningProgress","exp","isEquipped","inventory","Inventory","countableItemTypes","uniqueItemTypes","items","state","action","PlayerContext","React","createContext","updateContext","newData","setContext","value","CountableItems","UniqueItems","isInventoryTreasure","item","id","calculateSkill","skill","player","cultivationMulti","manualsSkillsMultiplier","treasuresMulti","treasuresSkillsMultiplier","treasuresPower","treasuresBonus","currentSkills","_i","_Object$entries","Object","entries","length","key","_slicedToArray","totalPower","forEach","Error","manualPower","error","treasures","totalMulti","skillsMulti","itemMulti","totalBonus","itemBonus","calculateStat","stat","manualsStatsMultiplier","realmMulti","treasuresStatsMultiplier","playerStats","statsMulti","PlayerFightDps","enemy","EnemyFightDps","addBaseStats","reward","times","_Object$entries$_i","console","log","concat","addSkillsExp","useFightManager","timer","useContext","gameSpeed","SettingsContext","currentTime","previousTime","useEffect","elapsedTime","playerDamage","enemyDamage","timesCompleted","currentHealth","Math","floor","enemyTimesDefeated","newEnemyHealth","min","newPlayerHealth","result","undefined","Trainings","baseTime","time","baseStatsMulti","Mining","Crafting","description","generator","TribulationDps","BreakthroughDps","CultivationRealms","multi","factor","pow","tribulation","steps","multiplier","_LargeRealms","smallIndex","statMulti","powerMulti","push","realmPowers","Gathering","gameContent","trainings","cultivationRealms","enemies","gameContext","GameContext","calculateMaxActions","maxActions","Number","MAX_VALUE","priceMulti","actionsNumber","_step","_iterator","_createForOfIteratorHelper","_loop","includes","itemIndex","findIndex","v","currentItem","isCountableItem","filter","s","n","done","_ret","err","e","f","quality","realmFactor","divider","baseQuality","sqrt","Treasures","realmIndex","CraftTreasure","activity","_activity$price","treasure","find","i","invTreasure","uuid","itemQuality","itemPower","Herbs","Minerals","Money","ActivitiesFunctions","mainItem","max","useActivityManager","game","source","_calculateTimesComple","requiredTime","calculateTimesCompleted","calculateRealmPower","realms","_i2","_Object$entries2","_Object$entries2$_i","stepReached","_i3","_Object$entries3","calculateTribulationPower","currentRealm","GameRuntime","props","tickRate","_React$useState","useState","Date","now","_React$useState2","setTimer","interval","setInterval","clearInterval","_React$useContext","useAgeManager","additionalHealth","useDefaultRegenManager","_state$manual","expGain","maxExp","newExp","newLevel","useCultivationManager","_React$useContext2","updateGameContext","breakthrough","realmDamage","newRealmHealth","newStep","_calculateTribulation","slice","alert","useBreakthroughManager","_jsx","_Fragment","children","getWindowDimensions","_window","window","width","innerWidth","height","innerHeight","PlayerStatsDictionary","getStatName","playerCurrentStats","TopBar","_state$activity","_state$enemy","theme","useTheme","playerAction","Paper","elevation","_jsxs","Box","spacing","display","alignItems","gap","paddingX","Typography","variant","parseAge","marginLeft","flexDirection","SettingsOutlinedIcon","fontSize","onClick","setSettings","settings","years","months","HealthBar","sx","minWidth","color","label","m","LinearProgress","HtmlTooltip","styled","_ref","className","_objectWithoutProperties","_excluded","Tooltip","classes","popper","_ref2","_defineProperty","tooltipClasses","tooltip","backgroundColor","maxWidth","typography","pxToRem","border","StatDetailsTooltip","statStructure","base","getStatStructure","parse","useNumberParser","title","component","success","main","PlayerStatsPane","paddingTop","paddingLeft","displayStats","Villages","imagePath","activities","getSpacing","PlayerLocationPane","location","src","padding","alt","CropImage","box","position","overflow","style","top","left","CropSquareImage","size","EquipmentCard","borderRadius","margin","bgcolor","marginTop","_treasure$item","itemStats","TreasureDescription","text","effect","_Object$entries3$_i","_i4","_Object$entries4","_Object$entries4$_i","Button","maxHeight","minHeight","unequipItem","Equipment","equippedItems","getEquippedItems","EquipCards","itemType","InventoryBottomPanel","pages","setPages","current","total","disabled","KeyboardDoubleArrowLeftIcon","KeyboardArrowLeftIcon","KeyboardArrowRightIcon","KeyboardDoubleArrowRightIcon","InventoryFiltersPane","setType","fullWidth","EmptyCell","LockIcon","isLocked","LockOutlinedIcon","LockOpenOutlinedIcon","InventoryTreasureItem","realmName","anchorEl","setAnchorEl","open","Boolean","trimmedRealmName","substring","charAt","ClickAwayListener","onClickAway","justifyContent","event","currentTarget","Popper","p","toggleItemLock","equippedIndex","equipItem","splice","dropItem","findItemDescription","InventoryCountableItem","cellData","CountableCellTooltip","InventoryGridItem","InventoryGrid","ceil","Tiles","Array","fill","element","flexWrap","tile","Realms","ItemTypes","AutosellPanel","_React$useState3","_React$useState4","setRealm","_React$useState5","_React$useState6","setQuality","_React$useState7","_React$useState8","isActive","setActive","autosellInterval","uItem","itemRealm","JSON","stringify","FormControl","InputLabel","Select","labelId","onChange","target","MenuItem","toString","realm_index","parseInt","newRealm","TextField","q","isNaN","FormGroup","FormControlLabel","control","Checkbox","checked","displayedInventory","inventoryPage","Stats","SkillDetailsTooltip","skillStructure","getSkillStructure","Skills","PlayerStatsLayout","panel","selectPanel","paddingBottom","LeftSideBar","borderRight","unshift","ProgressBar","rightLabel","rest","isRight","parseTime","toPrecision","ActivityStatsDescription","multiplicatorFunctionName","StatsDescription","ItemImages","_description$image","GatheringActivityCard","ItemRewardDescription","fastAction","progressBarLabel","toFixed","paddingY","borderColor","primary","marginRight","ActionsPage","Card","gameData","activityName","showTimesCompleted","ItemDescriptions","TreasureTooltip","context","craftTime","craftTimeLabel","marginY","ArrowForwardIcon","setActiveItem","GridItem","Cell","ItemGrid","cellWidth","cellHeight","itemTypes","view","BasicGridCell","whiteSpace","ResultItemDescription","ActiveItem","_player$state$activit","craft","PriceMultiplier","Input","defaultValue","newMulti","TreasureCell","_reward$","CraftingPage","activeItem","marginBottom","EnemyRow","withTooltip","enemyHealthLabel","TableRow","TableCell","toggleTooltip","onMouseOver","showTooltip","onMouseOut","hideTooltip","currentEnemy","FightingPage","TableContainer","Table","TableHead","TableBody","ActiveManual","expForPrevLevel","expForNextLevel","ManualStatsDescription","ManualSkillsDescription","EquippedManualCard","PlaceholderCard","EquippedManuals","equippedManuals","tileIndex","_createElement","ManualsList","storedManuals","sort","a","b","aIndex","canSelect","equipButtonClick","ManualsPage","BreakthroughAnimation","progress","isHeavenly","bar","zIndex","opacity","Placeholder","PassedTribulations","currentPower","tribulationMulti","calculateMaxTribulationStage","nextRealmIndex","step","remainingHealth","cultivationRealmsCopy","tribulationDps","playerDps","RealmBreakthroughPage","_nextRealm$currentSta","_nextRealm$tribulatio","r","TotalTribulations","trib","nextRealm","nextPower","_nextRealm$baseStats","ManualCell","ManualTooltip","ManualsShop","shopItems","setShopItems","shops","Manuals","ShopsPage","_useContentSelector","useContentSelector","states","setState","Content","ShopsMenu","useWindowDimensions","Training","ItemPriceDescription","_step2","_iterator2","borderLeft","Breakthrough","Fighting","Shops","MainWindow","_useWindowDimensions","Menu","canBreakthrough","realmDps","breakthroughSuccess","buttonColor","page","App","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","_getWindowDimensions","CssBaseline","ThemeProvider","DataManager","data","appData","SettingsPage","setOpened","Context","defaultContextValue","settingsContextDefault","cookies","cookieName","localStorageName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7627cc03.chunk.js","sourcesContent":["import { createTheme, responsiveFontSizes } from \"@mui/material\";\r\n\r\nconst LightTheme = responsiveFontSizes(\r\n  createTheme({\r\n    palette: {\r\n      background: {\r\n        default: \"rgb(240, 240, 240)\",\r\n        paper: \"rgb(240, 240, 240)\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nexport default LightTheme;\r\n","// Update interval in milliseconds\r\nexport const defaultUpdateInterval = 10;\r\n\r\n// Default autosave interval\r\nexport const defaultAutosaveInterval = 10000;\r\n\r\n// For converting player age\r\nexport const year = (3600 * 1000) / 50; // 1 hour counts as 50 years\r\nexport const month = year / 12;\r\nexport const day = month / 30;\r\n","import { ActivityItem } from \"GameConstants/Activities\";\r\nimport { PlayerBaseStats, PlayerSkills } from \"../Player\";\r\nimport { Image } from \"GameConstants/Interfaces\";\r\n\r\n// Some example manuals for now\r\n// Act like training techniques which you can study and they provide player with cumulative stat bonuses\r\nexport const CultivationManuals: CultivationManualType[] = [\r\n  {\r\n    name: \"Fist Strike\",\r\n    realm: \"Mortal 1\",\r\n    rarity: \"common\",\r\n    price: [{ name: \"Copper Coin\", type: \"money\", amount: 100 }],\r\n    image: {\r\n      path: \"./manuals/red.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    maxLevel: 10,\r\n    stats: {\r\n      attack: 0.01,\r\n    },\r\n  },\r\n  {\r\n    name: \"Block\",\r\n    realm: \"Mortal 1\",\r\n    rarity: \"common\",\r\n    price: [{ name: \"Copper Coin\", type: \"money\", amount: 100 }],\r\n    image: {\r\n      path: \"./manuals/yellow.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    maxLevel: 10,\r\n    stats: {\r\n      defence: 0.01,\r\n    },\r\n  },\r\n  {\r\n    name: \"Meditation\",\r\n    realm: \"Mortal 1\",\r\n    rarity: \"common\",\r\n    price: [{ name: \"Copper Coin\", type: \"money\", amount: 100 }],\r\n    image: {\r\n      path: \"./manuals/green.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    maxLevel: 10,\r\n    stats: {\r\n      health: 0.01,\r\n      healthRegen: 0.01,\r\n    },\r\n  },\r\n  {\r\n    name: \"Training Guidance\",\r\n    realm: \"Mortal 1\",\r\n    rarity: \"common\",\r\n    price: [{ name: \"Copper Coin\", type: \"money\", amount: 100 }],\r\n    image: {\r\n      path: \"./manuals/purple.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    maxLevel: 10,\r\n    skills: {\r\n      training: 0.01,\r\n    },\r\n  },\r\n];\r\n\r\nexport type CultivationManualType = {\r\n  name: string;\r\n  realm: string;\r\n  rarity: string; // an unused parameter for now\r\n  image: Image;\r\n  price: ActivityItem[];\r\n  maxLevel: number;\r\n  // Cumulative bonus to base stats\r\n  stats?: Partial<PlayerBaseStats>;\r\n  skills?: Partial<PlayerSkills>;\r\n};\r\n\r\n// a placeholder\r\nexport function levelExp(level, realm, rarity) {\r\n  return 10 * level;\r\n}\r\n\r\n// also a placeholder\r\nexport function totalExp(level) {\r\n  return 5 * (1 + level) * level;\r\n}\r\n","/* _____________________________________________________________________\r\nIf you want to add new player stats and skills change \r\ntype declarations and default values here\r\n  _____________________________________________________________________*/\r\n\r\nexport type PlayerBaseStats = {\r\n  health: number;\r\n  attack: number;\r\n  healthRegen: number;\r\n  defence: number;\r\n  insight: number; // multiplier for cultivation manuals experience gain\r\n};\r\n\r\nexport type PlayerCurrentStats = {\r\n  health: number;\r\n};\r\n\r\nexport type PlayerSkills = {\r\n  training: number;\r\n  mining: number;\r\n  crafting: number;\r\n  gathering: number;\r\n};\r\n\r\nexport const baseStats: PlayerBaseStats = {\r\n  attack: 1,\r\n  health: 10,\r\n  healthRegen: 0.5,\r\n  defence: 0,\r\n  insight: 1,\r\n};\r\n\r\nexport const currentStats: PlayerCurrentStats = {\r\n  health: 10,\r\n};\r\n\r\nexport const playerSkills: PlayerSkills = {\r\n  training: 0,\r\n  mining: 0,\r\n  crafting: 0,\r\n  gathering: 0,\r\n};\r\n\r\n// You can add player equipment types here\r\n// They are dumb though so multiple slots for single weapon type are currently not possible\r\nexport const PlayerEquipment = [\"weapon\", \"armor\", \"helmet\", \"ring\", \"pendant\"];\r\n","import { year } from \"GameConstants/Constants\";\r\nimport { CultivationManuals } from \"GameConstants/Items/CultivationManuals\";\r\nimport { PlayerContextType } from \"GameConstants/Interfaces\";\r\nimport { baseStats, currentStats, playerSkills } from \"GameConstants/Player\";\r\nimport React from \"react\";\r\nimport { Inventory } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\nexport const CountableItems = [\"money\", \"mineral\", \"herb\"];\r\nexport const UniqueItems = [\"treasure\", \"potion\"];\r\n\r\n// Some placeholder values to fill in the player object on first launch\r\nexport const playerContext: PlayerContextType = {\r\n  stats: {\r\n    age: year * 10,\r\n    ...baseStats,\r\n  },\r\n  currentStats: currentStats,\r\n  baseStats,\r\n  skills: playerSkills,\r\n  baseSkills: playerSkills,\r\n  realm: {\r\n    index: 0,\r\n    power: {},\r\n  },\r\n  manuals: CultivationManuals.map((manual) => ({\r\n    manual,\r\n    learningProgress: { exp: 0, level: 0 },\r\n    isEquipped: false,\r\n  })),\r\n  inventory: new Inventory({\r\n    countableItemTypes: CountableItems,\r\n    uniqueItemTypes: UniqueItems,\r\n    items: [],\r\n  }),\r\n  state: { action: \"idle\" },\r\n};\r\n\r\n/** Context initializator */\r\nexport const PlayerContext = React.createContext({\r\n  ...playerContext,\r\n  updateContext: (newData: Partial<PlayerContextType>) => {},\r\n  setContext: (value: React.SetStateAction<PlayerContextType>) => {},\r\n});\r\n\r\nexport default PlayerContext;\r\n","import { Activity } from \"./Activities/Activities\";\r\nimport { CultivationManualType } from \"./Items/CultivationManuals\";\r\nimport { EnemyType } from \"./Fighting/Enemies\";\r\nimport { PlayerBaseStats, PlayerCurrentStats, PlayerSkills } from \"./Player\";\r\nimport { Treasure } from \"./Items/Treasures\";\r\nimport { Inventory as InventoryClass } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n/* ______________________________________________________________________\r\n  Player Types                                             \r\n_________________________________________________________________________*/\r\nexport type PlayerAction =\r\n  | \"idle\"\r\n  | \"fighting\"\r\n  | \"breakthrough\"\r\n  | \"cultivating\"\r\n  | \"activity\"; // most of the actions in the game\r\n\r\nexport type PlayerState = {\r\n  action: PlayerAction;\r\n  enemy?: PlayerEnemyType;\r\n  realm?: RealmTribulation;\r\n  manual?: PlayerCultivationManual;\r\n  activity?: { name: string; source: string }; // player action source from global lists. Is used as a key to retrieve value from GameContext object\r\n};\r\n\r\nexport type PlayerActivity = Activity & { currentTime?: number };\r\n\r\nexport type RealmTribulation = {\r\n  index: number; // A pointer into global tribulation array\r\n};\r\n\r\n// Player stats are calculated based on baseStats, equipped items, learned manuals and so on\r\nexport type PlayerStats = PlayerBaseStats & {\r\n  age: number; // in milliseconds\r\n};\r\n\r\n// This probably needs a rework\r\nexport type PlayerEnemyType = EnemyType & {\r\n  currentHealth: number;\r\n};\r\n\r\nexport type PlayerRealm = {\r\n  index: number;\r\n  power: Partial<PlayerBaseStats>; // a calculated value based on passed tribulations\r\n};\r\n\r\nexport type PlayerCultivationManual = {\r\n  manual: CultivationManualType;\r\n  learningProgress: {\r\n    exp: number;\r\n    level: number;\r\n  };\r\n  isEquipped: boolean;\r\n};\r\n\r\n/* ______________________________________________________________________\r\n  Item types                                           \r\n_________________________________________________________________________*/\r\n\r\nexport const CountableItems = <const>[\"money\", \"mineral\", \"herb\"];\r\nexport type CountableItemType = (typeof CountableItems)[number];\r\nexport const UniqueItems = <const>[\"treasure\", \"potion\"];\r\nexport type UniqueItemType = (typeof UniqueItems)[number];\r\nexport type ItemType = CountableItemType | UniqueItemType;\r\n\r\nexport type InventoryTreasure = {\r\n  type: \"treasure\";\r\n  id: string;\r\n  isEquipped?: boolean;\r\n  isLocked?: boolean;\r\n  item: Required<Treasure>;\r\n};\r\n\r\nexport type InventoryCountableItem = {\r\n  type: CountableItemType;\r\n  id: string;\r\n  name: string;\r\n  amount: number;\r\n};\r\n\r\nexport type InventoryUniqueItem = InventoryTreasure;\r\nexport type InventoryItem = InventoryUniqueItem | InventoryCountableItem;\r\n\r\nexport type PlayerContextType = {\r\n  stats: PlayerStats; // calcuated stat values\r\n  currentStats: PlayerCurrentStats;\r\n  baseStats: PlayerBaseStats;\r\n  skills: PlayerSkills; // calculated skill values\r\n  baseSkills: PlayerSkills;\r\n  realm: PlayerRealm; // an index pointing to the global realms array and total calculated multiplier based on passed tribulations\r\n  manuals?: PlayerCultivationManual[]; // an array of all learned manuals with progress tracked for each\r\n  inventory: InventoryClass; // an array of all inventory items\r\n  state: PlayerState; // current player action\r\n};\r\n\r\nexport type CountableItem = {\r\n  type: CountableItemType;\r\n  name: string;\r\n  amount: number;\r\n};\r\n\r\n// Lazy type guards\r\nexport function isInventoryTreasure(item: any): item is InventoryTreasure {\r\n  return item.type === \"treasure\" && item.id && item.item;\r\n}\r\n\r\nexport function isCountableItem(item: any): item is CountableItem {\r\n  return item.name && item.amount;\r\n}\r\n\r\nexport type Image = {\r\n  path: string;\r\n  x: number;\r\n  y: number;\r\n  sizeX: number;\r\n  sizeY: number;\r\n};\r\n\r\nexport type Material = {\r\n  name: string;\r\n  description: string;\r\n  image: Image;\r\n};\r\n","import { isInventoryTreasure } from \"GameConstants/Interfaces\";\r\nimport {\r\n  InventoryItem,\r\n  PlayerContextType,\r\n  PlayerCultivationManual,\r\n} from \"GameConstants/Interfaces\";\r\nimport { PlayerSkills } from \"GameConstants/Player\";\r\n\r\n// Functions that calculate total player skills values based on inGame variables\r\nexport function calculateSkill(skill: string, player: PlayerContextType) {\r\n  const cultivationMulti = manualsSkillsMultiplier(skill, player.manuals);\r\n  const treasuresMulti = treasuresSkillsMultiplier(\r\n    skill,\r\n    player.inventory.items as any\r\n  );\r\n  const treasuresPower = treasuresBonus(skill, player.inventory.items as any);\r\n  return (\r\n    player.baseSkills[skill] * cultivationMulti * treasuresMulti +\r\n    treasuresPower\r\n  );\r\n}\r\n\r\n// Returns all of the player stats\r\nexport function playerSkills(player: PlayerContextType): PlayerSkills {\r\n  let currentSkills = { ...player.baseSkills };\r\n  for (const [key] of Object.entries(player.baseSkills)) {\r\n    currentSkills[key] = calculateSkill(key, player);\r\n  }\r\n\r\n  let skills = { ...player.skills, ...currentSkills };\r\n  return skills;\r\n}\r\n\r\n// Calculates effect on player skills from manuals\r\nexport function manualsSkillsMultiplier(\r\n  skill: string,\r\n  manuals: PlayerCultivationManual[] | undefined\r\n) {\r\n  // Calculate manuals multiplier\r\n  let totalPower = 1;\r\n  if (!manuals) return 1;\r\n  manuals.forEach((value) => {\r\n    try {\r\n      if (!value.isEquipped || !value.manual.skills) throw new Error(\"skip\");\r\n      const manualPower =\r\n        (value.manual.skills[skill] || 0) * value.learningProgress.level;\r\n      totalPower += manualPower;\r\n    } catch (error) {\r\n      /* do nothing*/\r\n    }\r\n  });\r\n  return totalPower;\r\n}\r\n\r\n// Treasures provide multiplier and flat bonus\r\nexport function treasuresSkillsMultiplier(\r\n  skill: string,\r\n  treasures: InventoryItem[] | undefined\r\n) {\r\n  let totalMulti = 1;\r\n  if (!treasures) return 0;\r\n  treasures.forEach((item) => {\r\n    if (isInventoryTreasure(item) && item.isEquipped) {\r\n      const skillsMulti = item.item.stats.skillsMulti;\r\n      const itemMulti = (skillsMulti && skillsMulti[skill]) || 0;\r\n      totalMulti *= 1 + itemMulti;\r\n    }\r\n  });\r\n  return totalMulti;\r\n}\r\n\r\nexport function treasuresBonus(\r\n  skill: string,\r\n  treasures: InventoryItem[] | undefined\r\n) {\r\n  let totalBonus = 0;\r\n  if (!treasures) return 0;\r\n  treasures.forEach((item) => {\r\n    if (isInventoryTreasure(item) && item.isEquipped) {\r\n      const skills = item.item.stats.skills;\r\n      const itemBonus = (skills && skills[skill]) || 0;\r\n      totalBonus += itemBonus;\r\n    }\r\n  });\r\n  return totalBonus;\r\n}\r\n\r\ntype SkillStructure = {\r\n  base: number;\r\n  manuals: number;\r\n  treasuresMulti: number;\r\n  treasures: number;\r\n};\r\n\r\nexport function getSkillStructure(\r\n  skill: string,\r\n  player: PlayerContextType\r\n): SkillStructure {\r\n  const { baseSkills, manuals, inventory } = player;\r\n  const baseStat = baseSkills[skill];\r\n  const manualsBonus = manualsSkillsMultiplier(skill, manuals);\r\n  const treasuresMulti = treasuresSkillsMultiplier(\r\n    skill,\r\n    inventory.items as any\r\n  );\r\n  const treasuresPower = treasuresBonus(skill, inventory.items as any);\r\n  return {\r\n    base: baseStat,\r\n    manuals: manualsBonus,\r\n    treasuresMulti,\r\n    treasures: treasuresPower,\r\n  };\r\n}\r\n","import { isInventoryTreasure } from \"GameConstants/Interfaces\";\r\nimport {\r\n  PlayerStats,\r\n  PlayerCultivationManual,\r\n  InventoryItem,\r\n  PlayerContextType,\r\n} from \"GameConstants/Interfaces\";\r\n\r\n// Functions that calculate total player stats values based on inGame variables\r\nexport function calculateStat(stat: string, player: PlayerContextType) {\r\n  const cultivationMulti = manualsStatsMultiplier(stat, player.manuals);\r\n  const realmMulti = player.realm.power[stat] || 1;\r\n  const treasuresMulti = treasuresStatsMultiplier(\r\n    stat,\r\n    player.inventory.items as any\r\n  );\r\n  const treasuresPower = treasuresBonus(stat, player.inventory.items as any);\r\n  return (\r\n    player.baseStats[stat] * realmMulti * cultivationMulti * treasuresMulti +\r\n    treasuresPower\r\n  );\r\n}\r\n\r\n// Returns all of the player stats\r\nexport function playerStats(player: PlayerContextType): PlayerStats {\r\n  let currentStats = { ...player.baseStats };\r\n  for (const [key] of Object.entries(player.baseStats)) {\r\n    currentStats[key] = calculateStat(key, player);\r\n  }\r\n\r\n  let stats = { ...player.stats, ...currentStats };\r\n  return stats;\r\n}\r\n\r\n// Calculates effect on player stats from manuals\r\nexport function manualsStatsMultiplier(\r\n  stat: string,\r\n  manuals: PlayerCultivationManual[] | undefined\r\n) {\r\n  // Calculate manuals multiplier\r\n  let totalPower = 1;\r\n  if (!manuals) return 1;\r\n  manuals.forEach((value) => {\r\n    try {\r\n      if (!value.isEquipped || !value.manual.stats) throw new Error(\"skip\");\r\n      const manualPower =\r\n        (value.manual.stats[stat] || 0) * value.learningProgress.level;\r\n      totalPower += manualPower;\r\n    } catch (error) {\r\n      /* do nothing*/\r\n    }\r\n  });\r\n  return totalPower;\r\n}\r\n\r\n// Treasures provide multiplier and flat bonus\r\nexport function treasuresStatsMultiplier(\r\n  stat: string,\r\n  treasures: InventoryItem[] | undefined\r\n) {\r\n  let totalMulti = 1;\r\n  if (!treasures) return 0;\r\n  treasures.forEach((item) => {\r\n    if (isInventoryTreasure(item) && item.isEquipped) {\r\n      const statsMulti = item.item.stats.statsMulti;\r\n      const itemMulti = (statsMulti && statsMulti[stat]) || 0;\r\n      totalMulti *= 1 + itemMulti;\r\n    }\r\n  });\r\n  return totalMulti;\r\n}\r\n\r\n// Treasures just provide flat bonuses for now\r\nexport function treasuresBonus(\r\n  stat: string,\r\n  treasures: InventoryItem[] | undefined\r\n) {\r\n  let totalBonus = 0;\r\n  if (!treasures) return 0;\r\n  treasures.forEach((item) => {\r\n    if (isInventoryTreasure(item) && item.isEquipped) {\r\n      const stats = item.item.stats.stats;\r\n      const itemBonus = (stats && stats[stat]) || 0;\r\n      totalBonus += itemBonus;\r\n    }\r\n  });\r\n  return totalBonus;\r\n}\r\n\r\ntype StatStructure = {\r\n  base: number;\r\n  realm: number;\r\n  manuals: number;\r\n  treasuresMulti: number;\r\n  treasures: number;\r\n};\r\n\r\n// Stat structure disambiguation for tooltips\r\nexport function getStatStructure(\r\n  stat: string,\r\n  player: PlayerContextType\r\n): StatStructure {\r\n  const { baseStats, realm, manuals, inventory } = player;\r\n  const baseStat = baseStats[stat];\r\n  const realmBonus = realm.power[stat] || 1;\r\n  const manualsBonus = manualsStatsMultiplier(stat, manuals);\r\n  const treasuresMulti = treasuresStatsMultiplier(stat, inventory.items as any);\r\n  const treasuresPower = treasuresBonus(stat, inventory.items as any);\r\n  return {\r\n    base: baseStat,\r\n    realm: realmBonus,\r\n    manuals: manualsBonus,\r\n    treasuresMulti,\r\n    treasures: treasuresPower,\r\n  };\r\n}\r\n","import { PlayerContextType } from \"GameConstants/Interfaces\";\r\nimport { EnemyType } from \"./Enemies\";\r\n\r\nexport function PlayerFightDps(player: PlayerContextType, enemy: EnemyType) {\r\n  return player.stats.attack / (1 + 0.01 * enemy.defence) - enemy.healthRegen;\r\n}\r\n\r\nexport function EnemyFightDps(enemy: EnemyType, player: PlayerContextType) {\r\n  return (\r\n    enemy.attack / (1 + 0.01 * player.stats.defence) - player.stats.healthRegen\r\n  );\r\n}\r\n","import { PlayerBaseStats } from \"GameConstants/Player\";\r\n\r\n// Function to increment player baseStats\r\nexport default function addBaseStats(\r\n  baseStats: PlayerBaseStats,\r\n  reward: Partial<PlayerBaseStats>,\r\n  times: number\r\n): PlayerBaseStats {\r\n  for (const [key, value] of Object.entries(reward)) {\r\n    try {\r\n      baseStats[key] += value * times;\r\n    } catch (error) {\r\n      console.log(`addBaseStats: ${error}`);\r\n    }\r\n  }\r\n  return baseStats;\r\n}\r\n","import { PlayerSkills } from \"GameConstants/Player\";\r\n\r\n// Function to increment player skill exp\r\nexport default function addSkillsExp(\r\n  skills: PlayerSkills,\r\n  reward: Partial<PlayerSkills>,\r\n  times: number\r\n): PlayerSkills {\r\n  for (const [key, value] of Object.entries(reward)) {\r\n    try {\r\n      skills[key] += value * times;\r\n    } catch (error) {\r\n      console.log(`addSkillExp: ${error}`);\r\n    }\r\n  }\r\n  return skills;\r\n}\r\n","import React from \"react\";\r\nimport PlayerContext from \"../Player/PlayerContext\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport { playerSkills } from \"GameEngine/Player/playerSkills\";\r\nimport { playerStats } from \"../Player/playerStats\";\r\nimport { EnemyFightDps, PlayerFightDps } from \"GameConstants/Fighting/fightDps\";\r\nimport enemyTimesDefeated from \"GameEngine/shared/enemyTimesDefeated\";\r\nimport addBaseStats from \"GameEngine/shared/addBaseStats\";\r\nimport addSkillsExp from \"GameEngine/shared/addSkillExp\";\r\nimport rewardItems from \"GameEngine/shared/rewardItems\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// This is not yet properly tested, beware\r\nexport default function useFightManager(timer: GameTimer) {\r\n  const player = React.useContext(PlayerContext);\r\n  let {\r\n    stats,\r\n    baseStats,\r\n    baseSkills,\r\n    currentStats,\r\n    state,\r\n    skills,\r\n    inventory,\r\n    updateContext,\r\n  } = player;\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n  const { currentTime, previousTime } = timer;\r\n  React.useEffect(() => {\r\n    // Update age\r\n    const elapsedTime = (timer.currentTime - timer.previousTime) * gameSpeed;\r\n    if (state.action !== \"fighting\" || !state.enemy) return;\r\n    const enemy = state.enemy;\r\n    // Calculate damage dealt by both parties\r\n    const playerDps = PlayerFightDps(player, enemy);\r\n    const enemyDps = EnemyFightDps(enemy, player);\r\n    const playerDamage = (playerDps * elapsedTime) / 1000;\r\n    const enemyDamage = (enemyDps * elapsedTime) / 1000;\r\n\r\n    const timesCompleted = enemyTimesDefeated(elapsedTime, enemy, player);\r\n\r\n    const newEnemyHealth = Math.min(\r\n      enemy.currentHealth - (playerDamage - enemy.health * timesCompleted),\r\n      enemy.health\r\n    );\r\n\r\n    const newPlayerHealth = Math.min(\r\n      currentStats.health - enemyDamage,\r\n      stats.health\r\n    );\r\n\r\n    // Process reward\r\n    if (timesCompleted > 0) {\r\n      // If activity increaces base stats\r\n      if (enemy.result.baseStats)\r\n        baseStats = addBaseStats(\r\n          baseStats,\r\n          enemy.result.baseStats,\r\n          timesCompleted\r\n        );\r\n      if (enemy.result.skills) {\r\n        baseSkills = addSkillsExp(\r\n          baseSkills,\r\n          enemy.result.skills,\r\n          timesCompleted\r\n        );\r\n      }\r\n\r\n      // Process reward\r\n      /*\r\n      if (enemy.result.items) {\r\n        inventory = rewardItems(player, enemy.result.items, timesCompleted);\r\n      }\r\n      */\r\n    }\r\n\r\n    // Loss condition\r\n    if (newPlayerHealth <= 0) {\r\n      state = { action: \"idle\", enemy: undefined };\r\n    }\r\n    // Update Hp values for both parties\r\n    else {\r\n      currentStats.health = newPlayerHealth;\r\n      state.enemy.currentHealth = newEnemyHealth;\r\n    }\r\n    // Update calculated stat values based on new baseStats\r\n    stats = playerStats(player);\r\n    skills = playerSkills(player);\r\n    updateContext({\r\n      currentStats,\r\n      baseStats,\r\n      baseSkills,\r\n      inventory,\r\n      state,\r\n      stats,\r\n      skills,\r\n    });\r\n  }, [currentTime]);\r\n}\r\n","import { EnemyFightDps, PlayerFightDps } from \"GameConstants/Fighting/fightDps\";\r\nimport { PlayerContextType, PlayerEnemyType } from \"GameConstants/Interfaces\";\r\n\r\n// Calculate the amount of times enemy can be defeated in a certain time period\r\nexport default function enemyTimesDefeated(\r\n  elapsedTime: number,\r\n  enemy: PlayerEnemyType,\r\n  player: PlayerContextType\r\n) {\r\n  const { currentStats } = player;\r\n  const playerDps = PlayerFightDps(player, enemy);\r\n  const enemyDps = EnemyFightDps(enemy, player);\r\n  let playerDamage = (playerDps * elapsedTime) / 1000;\r\n  let enemyDamage = (enemyDps * elapsedTime) / 1000;\r\n  if (enemyDamage >= currentStats.health) {\r\n    playerDamage *= currentStats.health / enemyDamage; // if the player actually died in this span of time\r\n  }\r\n  if (playerDamage < enemy.currentHealth) return 0;\r\n  if (playerDamage < enemy.health)\r\n    return playerDamage > enemy.currentHealth ? 1 : 0;\r\n  return Math.floor((playerDamage - enemy.currentHealth) / enemy.health);\r\n}\r\n","import { Activity } from \"./Activities\";\r\nimport { month, day } from \"../Constants\";\r\n\r\n// Provide bonuses to base stats\r\n// Placeholder values for now\r\nlet Trainings: Activity[] = [\r\n  {\r\n    // This one is totally overpowered, serves for test purposes :)\r\n    name: \"Running\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      baseStats: {\r\n        health: 0.5,\r\n        attack: 0.1,\r\n      },\r\n      skills: {\r\n        training: 0.01,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Breathing Practice\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      baseStats: {\r\n        health: 1,\r\n        healthRegen: 0.01,\r\n      },\r\n      skills: {\r\n        training: 0.01,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Squats\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      baseStats: {\r\n        attack: 0.2,\r\n      },\r\n      skills: {\r\n        training: 0.01,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Dodge\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      baseStats: {\r\n        defence: 0.1,\r\n      },\r\n      skills: {\r\n        training: 0.01,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Situps\",\r\n    baseTime: month,\r\n    result: {\r\n      baseStats: {\r\n        health: 1.5,\r\n        attack: 0.3,\r\n      },\r\n      skills: {\r\n        training: 0.03,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Relaxation\",\r\n    baseTime: month,\r\n    result: {\r\n      baseStats: {\r\n        health: 3,\r\n        healthRegen: 0.03,\r\n      },\r\n      skills: {\r\n        training: 0.03,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Basic Punch\",\r\n    baseTime: month,\r\n    result: {\r\n      baseStats: {\r\n        attack: 0.6,\r\n      },\r\n      skills: {\r\n        training: 0.03,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Block\",\r\n    baseTime: month,\r\n    result: {\r\n      baseStats: {\r\n        defence: 0.3,\r\n      },\r\n      skills: {\r\n        training: 0.03,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Swimming\",\r\n    baseTime: 5 * month,\r\n    result: {\r\n      baseStats: {\r\n        health: 5,\r\n        attack: 1,\r\n      },\r\n      skills: {\r\n        training: 0.1,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Climb Mountains\",\r\n    baseTime: 5 * month,\r\n    result: {\r\n      baseStats: {\r\n        health: 10,\r\n        healthRegen: 0.1,\r\n      },\r\n      skills: {\r\n        training: 0.1,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Hit the Scarecrows\",\r\n    baseTime: 5 * month,\r\n    result: {\r\n      baseStats: {\r\n        attack: 2,\r\n      },\r\n      skills: {\r\n        training: 0.1,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"Defence Stance\",\r\n    baseTime: 5 * month,\r\n    result: {\r\n      baseStats: {\r\n        defence: 1,\r\n      },\r\n      skills: {\r\n        training: 0.1,\r\n      },\r\n    },\r\n  },\r\n];\r\n\r\nTrainings = Trainings.map((item) => {\r\n  if (!item.time) item.time = \"training time\";\r\n  if (item.result.baseStats && !item.result.baseStatsMulti)\r\n    item.result.baseStatsMulti = \"default\";\r\n  if (item.result.skills && !item.result.skillsMulti)\r\n    item.result.skillsMulti = \"default\";\r\n  return item;\r\n});\r\n\r\nexport default Trainings;\r\n","import { Activity } from \"./Activities\";\r\nimport { day, month } from \"../Constants\";\r\n\r\n// Placeholder activities\r\nlet Mining: Activity[] = [\r\n  {\r\n    name: \"Copper\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      skills: {\r\n        mining: 0.01,\r\n      },\r\n      items: [{ type: \"mineral\", name: \"Copper\", amount: 1 }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron\",\r\n    baseTime: month,\r\n    result: {\r\n      skills: {\r\n        mining: 0.03,\r\n      },\r\n      items: [{ type: \"mineral\", name: \"Iron\", amount: 1 }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    baseTime: 6 * month,\r\n    result: {\r\n      skills: {\r\n        mining: 0.1,\r\n      },\r\n      items: [{ type: \"mineral\", name: \"Steel\", amount: 1 }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel\",\r\n    baseTime: 30 * month,\r\n    result: {\r\n      skills: {\r\n        mining: 0.3,\r\n      },\r\n      items: [{ type: \"mineral\", name: \"Cold Steel\", amount: 1 }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Celestial Gold\",\r\n    baseTime: 150 * month,\r\n    result: {\r\n      skills: {\r\n        mining: 1,\r\n      },\r\n      items: [{ type: \"mineral\", name: \"Celestial Gold\", amount: 1 }],\r\n    },\r\n  },\r\n];\r\n\r\nMining = Mining.map((item) => {\r\n  if (!item.time) item.time = \"mining time\";\r\n  if (item.result.baseStats && !item.result.baseStatsMulti)\r\n    item.result.baseStatsMulti = \"default\";\r\n  if (item.result.skills && !item.result.skillsMulti)\r\n    item.result.skillsMulti = \"default\";\r\n  return item;\r\n});\r\n\r\nexport default Mining;\r\n","import { Activity } from \"./Activities\";\r\nimport { day } from \"../Constants\";\r\n\r\n// Some example items for now\r\nlet Crafting: Activity[] = [\r\n  {\r\n    name: \"Copper Sword\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Copper\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Copper Sword\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Sword\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Copper Armor\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Copper\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Copper Armor\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Armor\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Copper Helmet\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and defence\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Copper\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Copper Helmet\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Helmet\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Copper Pendant\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and regen\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Copper\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Copper Pendant\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Pendant\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Copper Ring\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack and training\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Copper\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Copper Ring\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Ring\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron Sword\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Steel\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Iron Sword\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Sword\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron Armor\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Steel\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Iron Armor\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Armor\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron Helmet\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and defence\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Steel\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Iron Helmet\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Helmet\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron Pendant\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and regen\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Steel\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Iron Pendant\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Pendant\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron Ring\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack and training\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Steel\",\r\n          amount: 1,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Iron Ring\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Ring\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Sword\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Steel\",\r\n          amount: 5,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Steel Sword\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Sword\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Armor\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Steel\",\r\n          amount: 5,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Steel Armor\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Armor\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Helmet\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and defence\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Steel\",\r\n          amount: 5,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Steel Helmet\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Helmet\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Pendant\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and regen\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Steel\",\r\n          amount: 5,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Steel Pendant\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Pendant\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Ring\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack and training\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Steel\",\r\n          amount: 5,\r\n          type: \"mineral\",\r\n        },\r\n        {\r\n          name: \"Iron\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Steel Ring\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Ring\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel Sword\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Cold Steel\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Cold Steel Sword\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Sword\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel Armor\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Cold Steel\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Cold Steel Armor\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Armor\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel Helmet\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and defence\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Cold Steel\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Cold Steel Helmet\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Helmet\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel Pendant\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and regen\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Cold Steel\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Cold Steel Pendant\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Pendant\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel Ring\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack and training\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Cold Steel\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Cold Steel Ring\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Ring\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Sword\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Celestial Gold\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Golden Sword\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Sword\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Armor\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Celestial Gold\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Golden Armor\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Armor\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Helmet\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and defence\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Celestial Gold\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Golden Helmet\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Helmet\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Pendant\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts health and regen\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Celestial Gold\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Golden Pendant\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Pendant\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Ring\",\r\n    baseTime: 30 * day,\r\n    description: \"boosts attack and training\",\r\n    price: {\r\n      items: [\r\n        {\r\n          name: \"Celestial Gold\",\r\n          amount: 3,\r\n          type: \"mineral\",\r\n        },\r\n      ],\r\n    },\r\n    result: {\r\n      skills: { crafting: 0.1 },\r\n      skillsMulti: \"crafting skill reward\",\r\n      items: [\r\n        {\r\n          name: \"Golden Ring\",\r\n          amount: 1,\r\n          type: \"treasure\",\r\n          generator: \"Ring\",\r\n        },\r\n      ],\r\n    },\r\n  },\r\n];\r\n\r\nCrafting = Crafting.map((item) => {\r\n  if (item.result.skills && !item.result.skillsMulti)\r\n    item.result.skillsMulti = \"crafting skill reward\";\r\n  return item;\r\n});\r\n\r\nexport default Crafting;\r\n","import { PlayerContextType } from \"../Interfaces\";\r\nimport { PlayerBaseStats } from \"../Player\";\r\n\r\n//___________________________________________________________________\r\n// You can change breakthrough logic and Cultivation Realm stats here\r\n//___________________________________________________________________\r\n\r\nexport function TribulationDps(\r\n  realm: TribulationStats,\r\n  player: PlayerContextType\r\n) {\r\n  return (\r\n    realm.attack / (1 + 0.01 * player.stats.defence) - player.stats.healthRegen\r\n  );\r\n}\r\n\r\nexport function BreakthroughDps(\r\n  player: PlayerContextType,\r\n  realm: TribulationStats\r\n) {\r\n  return player.stats.attack / (1 + 0.01 * realm.defence) - realm.healthRegen;\r\n}\r\n\r\nexport type Tribulation = {\r\n  steps: number;\r\n  multiplier: number;\r\n  statsMulti: number;\r\n  stepReached?: number;\r\n};\r\n\r\nexport type TribulationStats = {\r\n  health: number;\r\n  healthRegen: number;\r\n  attack: number;\r\n  defence: number;\r\n};\r\n\r\nexport type CultivationRealm = {\r\n  name: string;\r\n  baseStats: TribulationStats;\r\n  currentStats?: TribulationStats & { currentHealth: number }; // currentHealth is for progress tracking\r\n  // Additional stats for heavenly tribulations\r\n  tribulation?: Tribulation;\r\n  // Reward stats multipliers\r\n  realmPowers: Partial<PlayerBaseStats>;\r\n};\r\n\r\nexport let CultivationRealms: CultivationRealm[] = [];\r\nconst LargeRealms = [\r\n  \"Mortal\",\r\n  \"Body Refinement\",\r\n  \"Qi Gathering\",\r\n  \"Foundation\",\r\n  \"Qi Transformation\",\r\n];\r\nconst smallRealmIndex = 9;\r\n\r\nconst multi = (factor: number, power: number) => factor ** power;\r\n\r\nconst tribulation = {\r\n  steps: 10,\r\n  statsMulti: 1.05,\r\n  multiplier: 1.1,\r\n};\r\n\r\nlet index = 0;\r\nfor (let realm of LargeRealms) {\r\n  for (let smallIndex = 1; smallIndex <= smallRealmIndex; smallIndex++) {\r\n    const name = realm + \" \" + smallIndex;\r\n    if (index === 0) {\r\n      CultivationRealms.push({\r\n        name,\r\n        baseStats: {\r\n          health: 0,\r\n          healthRegen: 0,\r\n          defence: 0,\r\n          attack: 0,\r\n        },\r\n        realmPowers: {\r\n          health: 1,\r\n          healthRegen: 1,\r\n          attack: 1,\r\n          defence: 1,\r\n          insight: 1,\r\n        },\r\n      });\r\n      index++;\r\n      continue;\r\n    }\r\n    const statMulti = multi(1.5, index - 1);\r\n    const powerMulti = multi(1.2, index);\r\n    CultivationRealms.push({\r\n      name,\r\n      baseStats: {\r\n        health: 100 * statMulti,\r\n        healthRegen: 0,\r\n        defence: 0,\r\n        attack: 3 * statMulti,\r\n      },\r\n      realmPowers: {\r\n        health: 1 * powerMulti,\r\n        healthRegen: 1 * powerMulti,\r\n        attack: 1 * powerMulti,\r\n        defence: 1 * powerMulti,\r\n        insight: 1 * powerMulti,\r\n      },\r\n      tribulation: smallIndex === 1 ? tribulation : undefined,\r\n    });\r\n    index++;\r\n  }\r\n}\r\n","import { Activity } from \"./Activities\";\r\nimport { day, month } from \"../Constants\";\r\n\r\n// Placeholder activities\r\nlet Gathering: Activity[] = [\r\n  {\r\n    name: \"Collect grass\",\r\n    baseTime: 5 * day,\r\n    result: {\r\n      skills: {\r\n        gathering: 0.01,\r\n      },\r\n      items: [{ type: \"herb\", name: \"Grass Stalk\", amount: 1 }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Pick tree leaves\",\r\n    baseTime: month,\r\n    result: {\r\n      skills: {\r\n        gathering: 0.03,\r\n      },\r\n      items: [{ type: \"herb\", name: \"Oak leaf\", amount: 1 }],\r\n    },\r\n  },\r\n];\r\n\r\nGathering = Gathering.map((item) => {\r\n  if (!item.time) item.time = \"gathering time\";\r\n  if (item.result.baseStats && !item.result.baseStatsMulti)\r\n    item.result.baseStatsMulti = \"default\";\r\n  if (item.result.skills && !item.result.skillsMulti)\r\n    item.result.skillsMulti = \"default\";\r\n  return item;\r\n});\r\n\r\nexport default Gathering;\r\n","import Trainings from \"GameConstants/Activities/Trainings\";\r\nimport Mining from \"GameConstants/Activities/Mining\";\r\nimport Crafting from \"GameConstants/Activities/Craft\";\r\nimport { Activity } from \"./Activities/Activities\";\r\nimport {\r\n  CultivationRealm,\r\n  CultivationRealms,\r\n} from \"./Cultivation/CultivationRealms\";\r\nimport Gathering from \"./Activities/Gathering\";\r\nimport { Enemies, EnemyType } from \"./Fighting/Enemies\";\r\n\r\n// Declarations for the game mechanics\r\n// Contains game data. Is stored to localStorage every autosave interval.\r\nexport type GameContent = {\r\n  trainings: Activity[]; // List of available activities for training tab\r\n  mining: Activity[]; // List of available activities for mining tab\r\n  crafting: Activity[]; // List of available activities for crafting tab\r\n  gathering: Activity[]; // List of activities for gathering tab\r\n  cultivationRealms: CultivationRealm[]; // Player cultivation realms with all tribulations passed and stat modifiers\r\n  enemies: EnemyType[];\r\n};\r\n\r\nexport const gameContent: GameContent = {\r\n  trainings: Trainings,\r\n  mining: Mining,\r\n  crafting: Crafting,\r\n  gathering: Gathering,\r\n  cultivationRealms: CultivationRealms,\r\n  enemies: Enemies,\r\n};\r\n\r\nexport const NavigationBarPages = [\r\n  \"Training\",\r\n  \"Manuals\",\r\n  \"Breakthrough\",\r\n  \"Mining\",\r\n  \"Crafting\",\r\n  \"Gathering\",\r\n  \"Fighting\",\r\n];\r\n","import { ActivityItem } from \"GameConstants/Activities\";\r\nimport { PlayerBaseStats, PlayerSkills } from \"GameConstants/Player\";\r\n\r\nexport type EnemyType = {\r\n  name: string;\r\n  health: number;\r\n  healthRegen: number;\r\n  defence: number;\r\n  attack: number;\r\n  description?: string;\r\n  // Activity result (aka reward)\r\n  result: {\r\n    baseStats?: Partial<PlayerBaseStats>; // character stats rewarded for completing activity\r\n    baseStatsMulti?: string; // calculate stats reward multiplier\r\n    skills?: Partial<PlayerSkills>; // skill exp rewarded for completing activity\r\n    skillsMulti?: string; // calculate skills reward multiplier\r\n    items?: ActivityItem[]; // items rewarded for completing activity\r\n  };\r\n};\r\n\r\n// Total placeholder content\r\nexport const Enemies: EnemyType[] = [\r\n  {\r\n    name: \"Random Nobody\",\r\n    description: \"A pathetic person with no prospects in life\",\r\n    health: 10,\r\n    healthRegen: 0,\r\n    defence: 0,\r\n    attack: 1,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Street Thug\",\r\n    description: \"A gangster from the streets\",\r\n    health: 50,\r\n    healthRegen: 0,\r\n    defence: 0,\r\n    attack: 3,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 5, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Ordinary rabbit\",\r\n    description: \"Turns out, they are pretty dangerous\",\r\n    health: 150,\r\n    healthRegen: 1,\r\n    defence: 10,\r\n    attack: 4,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 20, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Feral Rat\",\r\n    health: 250,\r\n    healthRegen: 2,\r\n    defence: 30,\r\n    attack: 10,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 50, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Forest Wolf\",\r\n    health: 500,\r\n    healthRegen: 5,\r\n    defence: 10,\r\n    attack: 40,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 250, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Forest Bandit\",\r\n    health: 1000,\r\n    healthRegen: 10,\r\n    defence: 30,\r\n    attack: 70,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1000, name: \"Copper Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Black Boar\",\r\n    health: 1500,\r\n    healthRegen: 10,\r\n    defence: 30,\r\n    attack: 150,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Turtle\",\r\n    health: 5000,\r\n    healthRegen: 25,\r\n    defence: 100,\r\n    attack: 30,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 5, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Stone Wolf\",\r\n    health: 8000,\r\n    healthRegen: 20,\r\n    defence: 50,\r\n    attack: 400,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 25, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"White Tiger\",\r\n    health: 15000,\r\n    healthRegen: 100,\r\n    defence: 50,\r\n    attack: 1000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 200, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Forest Bandit Leader\",\r\n    health: 25000,\r\n    healthRegen: 200,\r\n    defence: 20,\r\n    attack: 1500,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 500, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Evil Bat\",\r\n    health: 50000,\r\n    healthRegen: 200,\r\n    defence: 60,\r\n    attack: 2500,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1500, name: \"Silver Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Spirit Hare\",\r\n    description: \"What in the world is this thing?\",\r\n    health: 100000,\r\n    healthRegen: 400,\r\n    defence: 120,\r\n    attack: 4000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Swamp Alligator\",\r\n    health: 250000,\r\n    healthRegen: 1500,\r\n    defence: 200,\r\n    attack: 10000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 5, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Thunder Lizard\",\r\n    health: 600000,\r\n    healthRegen: 2500,\r\n    defence: 200,\r\n    attack: 20000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 25, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Blazing Leopard\",\r\n    health: 1.2e6,\r\n    healthRegen: 6000,\r\n    defence: 250,\r\n    attack: 50000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 150, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel Turtle\",\r\n    health: 2e6,\r\n    healthRegen: 10000,\r\n    defence: 500,\r\n    attack: 20000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 350, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n  {\r\n    name: \"Arrogant Young Master\",\r\n    description: \"Never heard of you!\",\r\n    health: 4e6,\r\n    healthRegen: 10000,\r\n    defence: 100,\r\n    attack: 150000,\r\n    result: {\r\n      items: [{ type: \"money\", amount: 1000, name: \"Golden Coin\" }],\r\n    },\r\n  },\r\n];\r\n","import { GameContent, gameContent } from \"GameConstants/GameContent\";\r\nimport React from \"react\";\r\n\r\n// Declarations for the React Context type\r\n// Contains game data. Is stored to localStorage every autosave interval.\r\nexport type GameContextType = GameContent;\r\n\r\nexport const gameContext: GameContextType = gameContent;\r\n\r\n/** Context initializator */\r\nexport const GameContext = React.createContext({\r\n  ...gameContext,\r\n  updateContext: (newData: Partial<GameContextType>) => {},\r\n  setContext: (value: React.SetStateAction<GameContextType>) => {},\r\n});\r\n\r\nexport default GameContext;\r\n","import { Activity } from \"GameConstants/Activities\";\r\nimport { PlayerContextType, isCountableItem } from \"GameConstants/Interfaces\";\r\n\r\n// Calculate the number of times activity can be executed\r\nexport default function calculateMaxActions(\r\n  player: PlayerContextType,\r\n  action: Activity\r\n): number {\r\n  try {\r\n    let maxActions = Number.MAX_VALUE;\r\n    if (!action.price) return maxActions;\r\n    const priceMulti = action.price.priceMulti || 1;\r\n    if (action.price.baseStats) {\r\n      for (const [key, value] of Object.entries(action.price.baseStats)) {\r\n        const actionsNumber = Math.floor(\r\n          player.baseStats[key] / value / priceMulti\r\n        );\r\n        if (actionsNumber < maxActions) maxActions = actionsNumber;\r\n      }\r\n    }\r\n    if (action.price.items) {\r\n      for (const item of action.price.items) {\r\n        // Process money\r\n        if ([\"money\", \"mineral\"].includes(item.type)) {\r\n          const itemIndex = player.inventory.items.findIndex(\r\n            (value) =>\r\n              value.type === item.type && (value as any).name === item.name\r\n          );\r\n          if (itemIndex === -1) return 0;\r\n          const currentItem = player.inventory[itemIndex];\r\n          if (currentItem && isCountableItem(currentItem)) {\r\n            const actionsNumber = Math.floor(\r\n              currentItem.amount / item.amount / priceMulti\r\n            );\r\n            if (actionsNumber < maxActions) maxActions = actionsNumber;\r\n          }\r\n        }\r\n        // Process treasures\r\n        if (item.type === \"treasure\") {\r\n          const items = player.inventory.items.filter(\r\n            (value) =>\r\n              value.type === \"treasure\" &&\r\n              (value as any).item.name === item.name\r\n          );\r\n          const actionsNumber = Math.floor(\r\n            items.length / item.amount / priceMulti\r\n          );\r\n          if (actionsNumber < maxActions) maxActions = actionsNumber;\r\n        }\r\n      }\r\n    }\r\n    return maxActions;\r\n  } catch (error) {\r\n    console.log(`calculateMaxActions: ${error}`);\r\n  }\r\n  return 0;\r\n}\r\n","// An example function\r\nexport default function quality(\r\n  realm: number,\r\n  crafting: number,\r\n  priceMulti?: number\r\n) {\r\n  const realmFactor = (realm + 1) / 10;\r\n  const divider = expDivider((1 + crafting) / (10 * 8 ** realmFactor));\r\n  return (\r\n    baseQuality *\r\n    (1 + 10 * crafting) * // Crafting impact\r\n    divider * // Realm Impact\r\n    (1 + 0.1 * (Math.sqrt(priceMulti || 1) - 1)) // Raw materials impact\r\n  );\r\n}\r\n\r\nexport function expDivider(x) {\r\n  return 1 - Math.exp(-x);\r\n}\r\n\r\nconst baseQuality = 10;\r\n","export default function power(quality: number, realm: number) {\r\n  const realmFactor = (realm + 1) / 10;\r\n  return quality * 6 ** realmFactor;\r\n}\r\n","import { PlayerSkills, PlayerBaseStats, PlayerEquipment } from \"../Player\";\r\nimport { Image } from \"../Interfaces\";\r\n\r\nconst Treasures: Treasure[] = [\r\n  {\r\n    name: \"Copper Sword\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/swords1.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 0,\r\n    type: \"weapon\",\r\n  },\r\n  {\r\n    name: \"Copper Armor\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/armors.png\",\r\n      x: 1 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 0,\r\n    type: \"armor\",\r\n  },\r\n  {\r\n    name: \"Copper Helmet\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/helmets.png\",\r\n      x: 1 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 0,\r\n    type: \"helmet\",\r\n  },\r\n  {\r\n    name: \"Copper Pendant\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/pendants.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 0,\r\n    type: \"pendant\",\r\n  },\r\n  {\r\n    name: \"Copper Ring\",\r\n    description: \"\",\r\n    image: { path: \"./treasures/rings.png\", x: 0, y: 0, sizeX: 32, sizeY: 32 },\r\n    realmIndex: 0,\r\n    type: \"ring\",\r\n  },\r\n  {\r\n    name: \"Iron Sword\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/swords1.png\",\r\n      x: 0 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 9,\r\n    type: \"weapon\",\r\n  },\r\n  {\r\n    name: \"Iron Armor\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/armors.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 9,\r\n    type: \"armor\",\r\n  },\r\n  {\r\n    name: \"Iron Helmet\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/helmets.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 9,\r\n    type: \"helmet\",\r\n  },\r\n  {\r\n    name: \"Iron Pendant\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/pendants.png\",\r\n      x: 1 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 9,\r\n    type: \"pendant\",\r\n  },\r\n  {\r\n    name: \"Iron Ring\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/rings.png\",\r\n      x: 1 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 9,\r\n    type: \"ring\",\r\n  },\r\n  {\r\n    name: \"Steel Sword\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/swords1.png\",\r\n      x: 4 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 18,\r\n    type: \"weapon\",\r\n  },\r\n  {\r\n    name: \"Steel Armor\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/armors.png\",\r\n      x: 3 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 18,\r\n    type: \"armor\",\r\n  },\r\n  {\r\n    name: \"Steel Helmet\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/helmets.png\",\r\n      x: 3 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 18,\r\n    type: \"helmet\",\r\n  },\r\n  {\r\n    name: \"Steel Pendant\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/pendants.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 18,\r\n    type: \"pendant\",\r\n  },\r\n  {\r\n    name: \"Steel Ring\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/rings.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 18,\r\n    type: \"ring\",\r\n  },\r\n  {\r\n    name: \"Cold Steel Sword\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/swords1.png\",\r\n      x: 5 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 27,\r\n    type: \"weapon\",\r\n  },\r\n  {\r\n    name: \"Cold Steel Armor\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/armors.png\",\r\n      x: 5 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 27,\r\n    type: \"armor\",\r\n  },\r\n  {\r\n    name: \"Cold Steel Helmet\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/helmets.png\",\r\n      x: 5 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 27,\r\n    type: \"helmet\",\r\n  },\r\n  {\r\n    name: \"Cold Steel Pendant\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/pendants.png\",\r\n      x: 4 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 27,\r\n    type: \"pendant\",\r\n  },\r\n  {\r\n    name: \"Cold Steel Ring\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/rings.png\",\r\n      x: 4 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 27,\r\n    type: \"ring\",\r\n  },\r\n  {\r\n    name: \"Golden Sword\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/swords1.png\",\r\n      x: 1 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 36,\r\n    type: \"weapon\",\r\n  },\r\n  {\r\n    name: \"Golden Armor\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/armors.png\",\r\n      x: 13 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 36,\r\n    type: \"armor\",\r\n  },\r\n  {\r\n    name: \"Golden Helmet\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/helmets.png\",\r\n      x: 13 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 36,\r\n    type: \"helmet\",\r\n  },\r\n  {\r\n    name: \"Golden Pendant\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/pendants.png\",\r\n      x: 3 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 36,\r\n    type: \"pendant\",\r\n  },\r\n  {\r\n    name: \"Golden Ring\",\r\n    description: \"\",\r\n    image: {\r\n      path: \"./treasures/rings.png\",\r\n      x: 3 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n    realmIndex: 36,\r\n    type: \"ring\",\r\n  },\r\n];\r\n\r\nexport type Treasure = {\r\n  name: string;\r\n\r\n  description: string;\r\n  image: Image;\r\n  type: TreasureType;\r\n  // Index in the realms array\r\n  realmIndex: number;\r\n  stats?: TreasureStats;\r\n  quality?: number;\r\n};\r\n\r\nexport type TreasureStats = {\r\n  stats?: Partial<PlayerBaseStats>;\r\n  statsMulti?: Partial<PlayerBaseStats>;\r\n  skills?: Partial<PlayerSkills>;\r\n  skillsMulti?: Partial<PlayerSkills>;\r\n};\r\n\r\nexport type TreasureType = (typeof PlayerEquipment)[number];\r\n\r\nexport default Treasures;\r\n","import { Activity, ActivityItem } from \"GameConstants/Activities/Activities\";\r\nimport { PlayerContextType, InventoryTreasure } from \"GameConstants/Interfaces\";\r\nimport Treasures, {\r\n  Treasure,\r\n  TreasureStats,\r\n} from \"GameConstants/Items/Treasures\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport quality from \"./quality\";\r\nimport power from \"./power\";\r\n\r\n// A function that returns treasure item as a result. Stats are based on player current skills\r\nexport default function CraftTreasure(stats: (power: number) => TreasureStats) {\r\n  return function (\r\n    activity: Activity,\r\n    player: PlayerContextType,\r\n    item: ActivityItem\r\n  ): InventoryTreasure | undefined {\r\n    try {\r\n      let treasure = Treasures.find((i: Treasure) => i.name === item.name);\r\n      if (!treasure) throw new Error(`${item.name} не найден`);\r\n      const invTreasure: InventoryTreasure = {\r\n        type: \"treasure\",\r\n        id: uuid(),\r\n        item: treasure as Required<Treasure>,\r\n      };\r\n      const itemQuality = quality(\r\n        treasure.realmIndex,\r\n        player.skills.crafting,\r\n        activity?.price?.priceMulti || 1\r\n      );\r\n      const itemPower = power(itemQuality, treasure.realmIndex);\r\n      invTreasure.item.stats = stats(itemPower);\r\n      invTreasure.item.quality = itemQuality;\r\n      return invTreasure;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return undefined;\r\n  };\r\n}\r\n","import quality from \"./quality\";\r\nimport power from \"./power\";\r\nimport CraftTreasure from \"./CraftTreasure\";\r\nimport {\r\n  armorStats,\r\n  helmetStats,\r\n  pendantStats,\r\n  ringStats,\r\n  swordStats,\r\n} from \"./CraftingFunctions\";\r\n\r\nconst CraftingFunctions = {\r\n  Sword: CraftTreasure(swordStats),\r\n  Armor: CraftTreasure(armorStats),\r\n  Helmet: CraftTreasure(helmetStats),\r\n  Ring: CraftTreasure(ringStats),\r\n  Pendant: CraftTreasure(pendantStats),\r\n};\r\n\r\nexport default CraftingFunctions;\r\n\r\nexport { quality, power };\r\n","import { TreasureStats } from \"GameConstants/Items/Treasures\";\r\n\r\nexport function swordStats(power: number): TreasureStats {\r\n  return {\r\n    stats: {\r\n      attack: power,\r\n    },\r\n    statsMulti: {\r\n      attack: Math.sqrt(power) / 100,\r\n    },\r\n  };\r\n}\r\n\r\nexport function armorStats(power: number): TreasureStats {\r\n  return {\r\n    stats: {\r\n      health: power * 5,\r\n    },\r\n    statsMulti: {\r\n      health: Math.sqrt(power) / 200,\r\n    },\r\n  };\r\n}\r\n\r\nexport function helmetStats(power: number): TreasureStats {\r\n  return {\r\n    stats: {\r\n      health: power,\r\n      defence: Math.sqrt(power),\r\n    },\r\n    statsMulti: {\r\n      health: Math.sqrt(power) / 200,\r\n      defence: Math.sqrt(power) / 1000,\r\n    },\r\n  };\r\n}\r\n\r\nexport function pendantStats(power: number): TreasureStats {\r\n  return {\r\n    stats: {\r\n      health: power,\r\n      healthRegen: power / 30,\r\n    },\r\n    statsMulti: {\r\n      health: Math.sqrt(power) / 200,\r\n      healthRegen: Math.sqrt(power) / 100,\r\n    },\r\n  };\r\n}\r\n\r\nexport function ringStats(power: number): TreasureStats {\r\n  return {\r\n    stats: {\r\n      attack: power / 2,\r\n    },\r\n    statsMulti: {\r\n      attack: Math.sqrt(power) / 200,\r\n    },\r\n    skillsMulti: {\r\n      training: Math.sqrt(power) / 200,\r\n    },\r\n  };\r\n}\r\n","import { Material } from \"../Interfaces\";\r\n// Placeholder content\r\nexport const Herbs: Material[] = [\r\n  {\r\n    name: \"Grass Stalk\",\r\n    description: \"Just an ordinary grass\",\r\n    image: {\r\n      path: \"./herbs/herbs.png\",\r\n      x: 32,\r\n      y: 6 * 32,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n  {\r\n    name: \"Oak leaf\",\r\n    description: \"A leaf from a big tree\",\r\n    image: {\r\n      path: \"./herbs/herbs.png\",\r\n      x: 2 * 32,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n];\r\n","import { Material } from \"../Interfaces\";\r\n// Placeholder content\r\nexport const Minerals: Material[] = [\r\n  {\r\n    name: \"Copper\",\r\n    description: \"A good for nothing material\",\r\n    image: {\r\n      path: \"./minerals/icon48.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n  {\r\n    name: \"Iron\",\r\n    description: \"The basic crafting necessity\",\r\n    image: {\r\n      path: \"./minerals/icon47.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n  {\r\n    name: \"Steel\",\r\n    description: \"Ordinary Steel\",\r\n    image: {\r\n      path: \"./minerals/icon2.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n  {\r\n    name: \"Cold Steel\",\r\n    description: \"Much harder than regular Steel\",\r\n    image: {\r\n      path: \"./minerals/icon1.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n  {\r\n    name: \"Celestial Gold\",\r\n    description: \"The best material for treasures\",\r\n    image: {\r\n      path: \"./minerals/icon7.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 32,\r\n      sizeY: 32,\r\n    },\r\n  },\r\n];\r\n","import { Image } from \"../Interfaces\";\r\n// Placeholder content\r\nconst Money: MoneyType[] = [\r\n  {\r\n    name: \"Copper Coin\",\r\n    description: \"The most common currency of the Mortal World\",\r\n    image: {\r\n      path: \"./money/coins.png\",\r\n      x: 0,\r\n      y: 36,\r\n      sizeX: 36,\r\n      sizeY: 36,\r\n    },\r\n  },\r\n  {\r\n    name: \"Silver Coin\",\r\n    description: \"Currency for slighter wealthier mortals\",\r\n    image: {\r\n      path: \"./money/coins.png\",\r\n      x: 0,\r\n      y: 72,\r\n      sizeX: 36,\r\n      sizeY: 36,\r\n    },\r\n  },\r\n  {\r\n    name: \"Golden Coin\",\r\n    description: \"The eternal store of value, at least for mortals\",\r\n    image: {\r\n      path: \"./money/coins.png\",\r\n      x: 0,\r\n      y: 0,\r\n      sizeX: 36,\r\n      sizeY: 36,\r\n    },\r\n  },\r\n];\r\n\r\nexport type MoneyType = {\r\n  name: string;\r\n  description: string;\r\n  image: Image;\r\n};\r\n\r\nexport default Money;\r\n","import { Activity } from \"./Activities\";\r\nimport { PlayerContextType } from \"../Interfaces\";\r\nimport { quality } from \"./Crafting\";\r\nimport { Treasures } from \"GameConstants/Items\";\r\nimport { Treasure } from \"GameConstants/Items/Treasures\";\r\nimport power from \"./Crafting/power\";\r\n\r\n// One function per activity type (training, crafting, mining) - determines how to calculate how long an activity takes based on skill level\r\nconst ActivitiesFunctions = {\r\n  \"training time\": function (activity: Activity, player: PlayerContextType) {\r\n    const { skills } = player;\r\n    const multi = 1 + skills.training;\r\n    return activity.baseTime / multi;\r\n  },\r\n  \"mining time\": function (activity: Activity, player: PlayerContextType) {\r\n    const { skills } = player;\r\n    const multi = 1 + skills.mining;\r\n    return activity.baseTime / multi;\r\n  },\r\n  \"gathering time\": function (activity: Activity, player: PlayerContextType) {\r\n    const { skills } = player;\r\n    const multi = 1 + skills.gathering;\r\n    return activity.baseTime / multi;\r\n  },\r\n  \"crafting skill reward\": function (\r\n    activity: Activity,\r\n    player: PlayerContextType\r\n  ): number {\r\n    const priceMulti = activity.price?.priceMulti || 1;\r\n    const mainItem = activity.result.items\r\n      ? activity.result.items[0]\r\n      : undefined;\r\n    if (!mainItem) return 1;\r\n    let treasure = Treasures.find((i: Treasure) => i.name === mainItem.name);\r\n    if (!treasure) return 1;\r\n    const itemQuality = quality(\r\n      treasure.realmIndex,\r\n      player.skills.crafting,\r\n      priceMulti\r\n    );\r\n    const itemPower = power(itemQuality, treasure.realmIndex);\r\n    return Math.max(1, Math.sqrt(0.1 * itemPower));\r\n  },\r\n  default: function (activity: Activity): number {\r\n    return 1 / divisionCoeff(activity.timesCompleted || 0);\r\n  },\r\n};\r\n\r\n// A placeholder function\r\nexport function divisionCoeff(timesCompleted: number) {\r\n  if (timesCompleted <= 10) return 1;\r\n  return 0.233 * (1 + Math.sqrt(timesCompleted));\r\n}\r\n\r\nexport default ActivitiesFunctions;\r\n","import { playerStats } from \"../Player/playerStats\";\r\nimport React from \"react\";\r\nimport PlayerContext from \"../Player/PlayerContext\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport GameContext from \"GameEngine/GameContext/GameContext\";\r\nimport removeItems from \"GameEngine/shared/removeItems\";\r\nimport addBaseStats from \"GameEngine/shared/addBaseStats\";\r\nimport calculateTimesCompleted from \"GameEngine/shared/calculateTimesCompleted\";\r\nimport addSkillsExp from \"GameEngine/shared/addSkillExp\";\r\nimport { playerSkills } from \"GameEngine/Player/playerSkills\";\r\nimport rewardActivityItems from \"GameEngine/shared/rewardActivityItems\";\r\nimport { ActivitiesFunctions, Activity } from \"GameConstants/Activities\";\r\nimport calculateMaxActions from \"GameEngine/shared/calculateMaxActions\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// The main function for inGame player actions processing\r\nexport default function useActivityManager(timer: GameTimer) {\r\n  const player = React.useContext(PlayerContext);\r\n  const game = React.useContext(GameContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n  let {\r\n    state,\r\n    baseStats,\r\n    stats,\r\n    inventory,\r\n    baseSkills,\r\n    skills,\r\n    updateContext,\r\n  } = player;\r\n\r\n  React.useEffect(() => {\r\n    try {\r\n      // Bail out\r\n      if (state.action !== \"activity\" || !state.activity) return;\r\n\r\n      // Calculate activity progress based on time passed\r\n      const elapsedTime = (timer.currentTime - timer.previousTime) * gameSpeed;\r\n      let activity = game[state.activity.source].find(\r\n        (item: Activity) => state.activity && item.name === state.activity.name\r\n      );\r\n      if (!activity) return;\r\n      if (!activity.currentTime) activity.currentTime = 0;\r\n      const maxActions = calculateMaxActions(player, activity);\r\n      if (maxActions === 0) {\r\n        // bail out if player can't complete action even a single time\r\n        state = { action: \"idle\", activity: undefined };\r\n        updateContext({ state });\r\n      }\r\n      const { timesCompleted, currentTime } = calculateTimesCompleted(\r\n        elapsedTime,\r\n        activity,\r\n        player\r\n      );\r\n\r\n      activity.currentTime = currentTime;\r\n      activity.timesCompleted =\r\n        (activity?.timesCompleted || 0) + timesCompleted;\r\n      // Action not completed yet. Just update the progress and move on\r\n      if (timesCompleted === 0) {\r\n        game.updateContext({ ...game });\r\n        return;\r\n      }\r\n      // Action finished. Process cost and reward\r\n      else {\r\n        // Process activity price a bit of a hacky way\r\n        if (activity.price) {\r\n          const priceMulti = activity.priceMulti || 1;\r\n          if (activity.price.baseStats)\r\n            baseStats = addBaseStats(\r\n              baseStats,\r\n              activity.price.baseStats,\r\n              -timesCompleted * priceMulti\r\n            );\r\n          // Process activity price in terms of items\r\n          /*\r\n          if (activity.price.items) \r\n          \r\n            inventory = removeItems(\r\n              inventory,\r\n              activity.price.items,\r\n              timesCompleted * priceMulti\r\n            );\r\n            */\r\n        }\r\n\r\n        // If activity increaces base stats\r\n        if (activity.result.baseStats)\r\n          baseStats = addBaseStats(\r\n            baseStats,\r\n            activity.result.baseStats,\r\n            timesCompleted *\r\n              (typeof activity.result.baseStatsMulti === \"string\"\r\n                ? ActivitiesFunctions[activity.result.baseStatsMulti](\r\n                    activity,\r\n                    player\r\n                  )\r\n                : 1)\r\n          );\r\n        if (activity.result.skills) {\r\n          baseSkills = addSkillsExp(\r\n            baseSkills,\r\n            activity.result.skills,\r\n            timesCompleted *\r\n              (typeof activity.result.skillsMulti === \"string\"\r\n                ? ActivitiesFunctions[activity.result.skillsMulti](\r\n                    activity,\r\n                    player\r\n                  )\r\n                : 1)\r\n          );\r\n        }\r\n\r\n        // Process reward\r\n        if (activity.result.items) {\r\n          /*inventory = rewardActivityItems(player, activity, timesCompleted);*/\r\n        }\r\n      }\r\n      // Update calculated stat values based on new baseStats\r\n      stats = playerStats(player);\r\n      skills = playerSkills(player);\r\n      updateContext({ stats, baseStats, baseSkills, skills, inventory });\r\n    } catch (error) {\r\n      console.log(`Error in useActivityManager: ${error}`);\r\n    }\r\n  }, [timer]);\r\n}\r\n","import { Activity } from \"GameConstants/Activities/Activities\";\r\nimport calculateMaxActions from \"./calculateMaxActions\";\r\nimport { PlayerContextType } from \"GameConstants/Interfaces\";\r\nimport { ActivitiesFunctions } from \"GameConstants/Activities\";\r\n\r\n// Calculate how many times activity can be completed considering activity price\r\nexport default function calculateTimesCompleted(\r\n  elapsedTime: number,\r\n  activity: Activity,\r\n  player: PlayerContextType\r\n): { timesCompleted: number; currentTime: number } {\r\n  let currentTime = activity.currentTime || 0;\r\n  currentTime += elapsedTime;\r\n  // Calculate overflow\r\n  const requiredTime = activity.time\r\n    ? ActivitiesFunctions[activity.time](activity, player)\r\n    : activity.baseTime;\r\n  let timesCompleted = Math.floor(currentTime / requiredTime);\r\n  currentTime = currentTime - timesCompleted * requiredTime;\r\n  // Limit if activity has a set price\r\n  const maxActions = calculateMaxActions(player, activity);\r\n  if (maxActions <= timesCompleted) currentTime = 0; // reset to the end of the last completed activity\r\n  timesCompleted = Math.min(timesCompleted, maxActions);\r\n  return { timesCompleted, currentTime };\r\n}\r\n","import { CultivationRealm } from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport { PlayerBaseStats, baseStats } from \"GameConstants/Player\";\r\n\r\n// Caclulates realm stats multiplier based on all tribulations completed\r\nexport default function calculateRealmPower(\r\n  index: number,\r\n  realms: CultivationRealm[]\r\n): PlayerBaseStats {\r\n  const power = <PlayerBaseStats>{};\r\n  for (const [key] of Object.entries(baseStats)) {\r\n    power[key] = 1;\r\n  }\r\n  // Take current realm into account\r\n  for (let [key, value] of Object.entries(realms[index].realmPowers)) {\r\n    power[key] *= value;\r\n  }\r\n  // Take all reached heavenly tribulation steps into account\r\n  for (let i = 0; i <= index; i++) {\r\n    const realm = realms[i];\r\n    if (!realm.tribulation || !realm.tribulation.stepReached) continue;\r\n    const powerMulti =\r\n      realm.tribulation.statsMulti ** realm.tribulation.stepReached;\r\n    for (let [key] of Object.entries(realm.realmPowers)) {\r\n      power[key] *= powerMulti;\r\n    }\r\n  }\r\n  return power;\r\n}\r\n","import { CultivationRealm } from \"GameConstants/Cultivation/CultivationRealms\";\r\n\r\n// For the breakthrough manager\r\nexport default function calculateTribulationPower(\r\n  index: number,\r\n  realms: CultivationRealm[]\r\n): { health: number; attack: number; healthRegen: number; defence: number } {\r\n  const currentRealm = realms[index];\r\n  const power = {\r\n    health: currentRealm.baseStats.health,\r\n    attack: currentRealm.baseStats.attack,\r\n    healthRegen: currentRealm.baseStats.healthRegen,\r\n    defence: currentRealm.baseStats.defence,\r\n  };\r\n  // First step doesn't get more difficult\r\n  if (!currentRealm.tribulation || !currentRealm.tribulation.stepReached)\r\n    return power;\r\n  // Take all reached heavenly tribulation steps into account\r\n  for (let i = 0; i <= index; i++) {\r\n    const realm = realms[i];\r\n    if (!realm.tribulation || !realm.tribulation.stepReached) continue;\r\n    const powerMulti =\r\n      realm.tribulation.multiplier ** realm.tribulation.stepReached;\r\n\r\n    power.health *= powerMulti;\r\n    power.attack *= powerMulti;\r\n    power.defence *= powerMulti;\r\n    power.healthRegen *= powerMulti;\r\n  }\r\n\r\n  return power;\r\n}\r\n","import React from \"react\";\r\n\r\nimport useAgeManager from \"./Managers/useAgeManager\";\r\nimport useDefaultRegenManager from \"./Managers/useDefaultRegenManager\";\r\nimport useFightManager from \"./Managers/useFightManager\";\r\nimport useCultivationManager from \"./Managers/useCultivationManager\";\r\nimport useActivityManager from \"./Managers/useActivityManager\";\r\nimport useBreakthroughManager from \"./Managers/useBreakthroughManager\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\nexport type GameTimer = {\r\n  previousTime: number;\r\n  currentTime: number;\r\n};\r\n\r\n// Wrapper for loading player save data\r\nexport default function GameRuntime(props: any) {\r\n  const { tickRate } = React.useContext(SettingsContext);\r\n\r\n  const [timer, setTimer] = React.useState<GameTimer>({\r\n    previousTime: Date.now(),\r\n    currentTime: Date.now(),\r\n  });\r\n\r\n  // Initializing the game loop\r\n  React.useEffect(() => {\r\n    // update the timers\r\n    const interval = setInterval(() => {\r\n      setTimer((timer) => ({\r\n        previousTime: timer.currentTime,\r\n        currentTime: Date.now(),\r\n      }));\r\n    }, 1000 / tickRate);\r\n    // clears the timer on component unmount to prevent memory leak\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [tickRate]);\r\n\r\n  // Run game managers\r\n  useAgeManager(timer);\r\n  useDefaultRegenManager(timer);\r\n  useFightManager(timer);\r\n  useCultivationManager(timer);\r\n  useActivityManager(timer);\r\n  useBreakthroughManager(timer);\r\n\r\n  return <>{props.children}</>;\r\n}\r\n","import React from \"react\";\r\nimport PlayerContext from \"../Player/PlayerContext\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Just a function to update player age\r\nexport default function useAgeManager(timer: GameTimer) {\r\n  const { stats, state, updateContext } = React.useContext(PlayerContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n\r\n  const { currentTime, previousTime } = timer;\r\n  React.useEffect(() => {\r\n    // Update age\r\n    if ([\"idle\", \"breakthrough\"].includes(state.action)) return;\r\n    const elapsedTime = (timer.currentTime - timer.previousTime) * gameSpeed;\r\n    stats.age += elapsedTime;\r\n    updateContext({ stats });\r\n  }, [currentTime]);\r\n}\r\n","import PlayerContext from \"../Player/PlayerContext\";\r\nimport React from \"react\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport { month } from \"GameConstants/Constants\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Placeholder. #todo: replace it with some better logic.\r\nexport default function useDefaultRegenManager(timer: GameTimer) {\r\n  const { stats, currentStats, state, updateContext } =\r\n    React.useContext(PlayerContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n  const { currentTime, previousTime } = timer;\r\n  React.useEffect(() => {\r\n    // Regen health if health is not full\r\n    const elapsedTime = (currentTime - previousTime) * gameSpeed;\r\n    if (\r\n      currentStats.health <= stats.health &&\r\n      [\"training\", \"activity\", \"cultivating\"].includes(state.action)\r\n    ) {\r\n      const passiveRegen = 30; // additional passive regen outside of fighting in percents of max health\r\n      const additionalHealth =\r\n        (((stats.health * passiveRegen) / 100) * elapsedTime) / month;\r\n      currentStats.health = Math.min(\r\n        currentStats.health +\r\n          (stats.healthRegen * elapsedTime) / 1000 +\r\n          additionalHealth,\r\n        stats.health\r\n      );\r\n      updateContext({ stats });\r\n    }\r\n  }, [currentTime]);\r\n}\r\n","import { playerStats } from \"../Player/playerStats\";\r\nimport React from \"react\";\r\nimport PlayerContext from \"../Player/PlayerContext\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport { playerSkills } from \"GameEngine/Player/playerSkills\";\r\nimport { totalExp, levelExp } from \"GameConstants/Items/CultivationManuals\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Updates cultivation manuals learning progress\r\nexport default function useCultivationManager(timer: GameTimer) {\r\n  const player = React.useContext(PlayerContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n  let { stats, state, skills, updateContext } = player;\r\n  const { currentTime, previousTime } = timer;\r\n  React.useEffect(() => {\r\n    if (state.action !== \"cultivating\" || !state.manual) return;\r\n    // Update age\r\n    const elapsedTime = (timer.currentTime - timer.previousTime) * gameSpeed;\r\n    // calculate exp gain\r\n    const { learningProgress, manual } = state.manual;\r\n    const { level, exp } = learningProgress;\r\n    const expGain = (stats.insight * elapsedTime) / 1000;\r\n    const maxExp = totalExp(manual.maxLevel);\r\n    const newExp = Math.min(exp + expGain, maxExp);\r\n\r\n    const overflowExp = newExp - totalExp(level);\r\n    const newLevel =\r\n      overflowExp >=\r\n      levelExp(learningProgress.level + 1, manual.realm, manual.rarity)\r\n        ? level + 1\r\n        : level;\r\n    // update manual progress\r\n    state.manual.learningProgress.exp = newExp;\r\n    // update player stats on reaching new level\r\n    if (newLevel !== level) {\r\n      state.manual.learningProgress.level = newLevel;\r\n      if (manual.stats) stats = playerStats(player);\r\n      if (manual.skills) skills = playerSkills(player);\r\n    }\r\n    if (newExp >= maxExp) state = { action: \"idle\", manual: undefined }; // return to idle state if the manual is finished\r\n    updateContext({ state, stats, skills });\r\n  }, [currentTime]);\r\n}\r\n","import { playerStats } from \"../Player/playerStats\";\r\nimport React from \"react\";\r\nimport PlayerContext from \"../Player/PlayerContext\";\r\nimport { GameTimer } from \"GameEngine/GameRuntime\";\r\nimport GameContext from \"GameEngine/GameContext/GameContext\";\r\nimport calculateRealmPower from \"GameEngine/shared/calculateRealmPower\";\r\nimport calculateTribulationPower from \"GameEngine/shared/calculateTribulationPower\";\r\nimport {\r\n  BreakthroughDps,\r\n  TribulationDps,\r\n} from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Manages realm breakthroughs\r\nexport default function useBreakthroughManager(timer: GameTimer) {\r\n  const player = React.useContext(PlayerContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n  const { cultivationRealms, updateContext: updateGameContext } =\r\n    React.useContext(GameContext);\r\n  let { stats, state, realm, updateContext, currentStats } = player;\r\n  const { currentTime, previousTime } = timer;\r\n  React.useEffect(() => {\r\n    if (state.action !== \"breakthrough\" || !state.realm) return;\r\n    const elapsedTime = (timer.currentTime - timer.previousTime) * gameSpeed;\r\n    // Calculate damage dealt by both parties\r\n    const breakthrough = cultivationRealms[state.realm.index];\r\n\r\n    if (!breakthrough || !breakthrough.currentStats) return;\r\n\r\n    const playerDps = BreakthroughDps(\r\n      player,\r\n      breakthrough.currentStats || breakthrough.baseStats\r\n    );\r\n    const realmDps = TribulationDps(\r\n      breakthrough.currentStats || breakthrough.baseStats,\r\n      player\r\n    );\r\n    const playerDamage = (playerDps * elapsedTime) / 1000;\r\n    const realmDamage = (realmDps * elapsedTime) / 1000;\r\n\r\n    const newRealmHealth = Math.min(\r\n      breakthrough.currentStats.currentHealth - playerDamage,\r\n      breakthrough.currentStats.health\r\n    );\r\n    const newPlayerHealth = Math.min(\r\n      currentStats.health - realmDamage,\r\n      stats.health\r\n    );\r\n\r\n    // Victory condition\r\n    if (newRealmHealth <= 0) {\r\n      // Check if the tribulation has layers\r\n      if (breakthrough.tribulation) {\r\n        const stepReached = breakthrough.tribulation.stepReached;\r\n        if (!stepReached || breakthrough.tribulation.steps > stepReached) {\r\n          // Proceed to the next step\r\n\r\n          const newStep = stepReached !== undefined ? stepReached + 1 : 1;\r\n          breakthrough.tribulation.stepReached = newStep;\r\n          const { health, healthRegen, attack, defence } =\r\n            calculateTribulationPower(state.realm.index, cultivationRealms);\r\n\r\n          breakthrough.currentStats.health = health;\r\n          breakthrough.currentStats.healthRegen = healthRegen;\r\n          breakthrough.currentStats.attack = attack;\r\n          breakthrough.currentStats.defence = defence;\r\n          breakthrough.currentStats.currentHealth = health;\r\n          updateGameContext({ cultivationRealms: cultivationRealms.slice() });\r\n          return;\r\n        } else {\r\n          // All steps finished update player realm and game context\r\n          realm.index = state.realm.index;\r\n          if (breakthrough.tribulation)\r\n            breakthrough.tribulation.stepReached =\r\n              breakthrough.tribulation.steps;\r\n          realm.power = calculateRealmPower(realm.index, cultivationRealms);\r\n          state = { action: \"idle\", realm: undefined };\r\n          breakthrough.currentStats = undefined;\r\n          // Update player stats\r\n          stats = playerStats(player);\r\n          updateContext({ stats, currentStats, state, realm });\r\n          updateGameContext({ cultivationRealms: cultivationRealms.slice() });\r\n          alert(\"Breakthrough success!\");\r\n          return;\r\n        }\r\n      }\r\n      // Update player realm\r\n      realm.index = state.realm.index;\r\n      state = { action: \"idle\", realm: undefined };\r\n      // Update player stats\r\n      realm.power = calculateRealmPower(realm.index, cultivationRealms);\r\n      stats = playerStats(player);\r\n      breakthrough.currentStats = undefined;\r\n      updateContext({ stats, currentStats, state, realm });\r\n      updateGameContext({ cultivationRealms: cultivationRealms.slice() });\r\n      alert(\"Breakthrough success!\");\r\n    }\r\n\r\n    // Loss condition\r\n    else if (newPlayerHealth <= 0) {\r\n      if (breakthrough.tribulation) {\r\n        const stepReached = breakthrough.tribulation.stepReached;\r\n        if (!stepReached) {\r\n          state = { action: \"idle\", realm: undefined };\r\n          updateContext({ state });\r\n          // The breakthrough was successful, albeit not stages were finished\r\n        } else {\r\n          realm.index = state.realm.index;\r\n          realm.power = calculateRealmPower(realm.index, cultivationRealms);\r\n          state = { action: \"idle\", realm: undefined };\r\n          // Update player stats\r\n          stats = playerStats(player);\r\n          breakthrough.currentStats = undefined;\r\n          (breakthrough.tribulation as any).stepReached -= 1;\r\n          updateContext({ stats, currentStats, state, realm });\r\n\r\n          updateGameContext({ cultivationRealms: cultivationRealms.slice() });\r\n          alert(\"Breakthrough success!\");\r\n          return;\r\n        }\r\n      }\r\n      state = { action: \"idle\", realm: undefined };\r\n      breakthrough.currentStats = undefined;\r\n      alert(\"Breakthrough failed, you are not strong enough yet\");\r\n    }\r\n    // Update Hp values for both parties\r\n    else {\r\n      currentStats.health = newPlayerHealth;\r\n      breakthrough.currentStats.currentHealth = newRealmHealth;\r\n      updateContext({ currentStats, state, realm });\r\n      updateGameContext({ cultivationRealms });\r\n    }\r\n  }, [currentTime]);\r\n}\r\n","import React from \"react\";\r\n\r\n// Simple wrapper\r\nexport function getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\n// Re-renders page on screen size change\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = React.useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","// Transforms variable names to text displayed on screen\r\n// Pretty useless thing actually and should be moved to the frontend implementation\r\nconst PlayerStatsDictionary = {\r\n  age: \"Age\",\r\n  health: \"Hp\",\r\n  healthRegen: \"Hp.regen\",\r\n  attack: \"Atk\",\r\n  defence: \"Def\",\r\n  training: \"training\",\r\n  mining: \"mining\",\r\n  crafting: \"crafting\",\r\n};\r\n\r\nexport function getStatName(name: string) {\r\n  return PlayerStatsDictionary[name] || name;\r\n}\r\n\r\nexport default PlayerStatsDictionary;\r\n","import { PlayerContextType } from \"GameConstants/Interfaces\";\r\nimport { PlayerCurrentStats } from \"GameConstants/Player\";\r\nimport { playerStats } from \"./playerStats\";\r\n\r\n// Prevents overflow on player stats change for all of the currentStats\r\nexport function playerCurrentStats(\r\n  player: PlayerContextType\r\n): PlayerCurrentStats {\r\n  let currentStats = { ...player.currentStats };\r\n  let stats = playerStats(player);\r\n  for (const [key] of Object.entries(player.baseStats)) {\r\n    currentStats[key] = Math.min(currentStats[key], stats[key]);\r\n  }\r\n\r\n  return currentStats;\r\n}\r\n","import { Box, Paper, Typography, useTheme } from \"@mui/material\";\r\n\r\nimport SettingsOutlinedIcon from \"@mui/icons-material/SettingsOutlined\";\r\nimport React from \"react\";\r\nimport { getWindowDimensions } from \"Utils/useWindowDimensions\";\r\nimport { PlayerContext, GameContext } from \"GameEngine\";\r\nimport { year, month } from \"GameConstants/Constants\";\r\nimport { SettingsContext } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = {\r\n  setSettings: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\n// Top bar with some game stats and values\r\nexport default function TopBar(props: Props) {\r\n  const theme = useTheme();\r\n  const { stats, realm, state } = React.useContext(PlayerContext);\r\n  const { cultivationRealms } = React.useContext(GameContext);\r\n  const { gameSpeed } = React.useContext(SettingsContext);\r\n\r\n  const { width } = getWindowDimensions();\r\n\r\n  let playerAction = state.action;\r\n  if (state.action === \"activity\")\r\n    playerAction += \" (\" + state.activity?.name + \")\";\r\n  if (state.action === \"cultivating\")\r\n    playerAction += \" (\" + state.manual?.manual.name + \")\";\r\n  if (state.action === \"fighting\")\r\n    playerAction += \" (\" + state.enemy?.name + \")\";\r\n\r\n  return (\r\n    <>\r\n      <Paper elevation={8}>\r\n        <Box\r\n          height={theme.spacing(8)}\r\n          width={width}\r\n          display=\"flex\"\r\n          alignItems={\"center\"}\r\n          gap={2}\r\n          paddingX={2}\r\n        >\r\n          <Box>\r\n            <Typography variant=\"h5\">Age: {parseAge(stats.age)}</Typography>\r\n            <Typography variant=\"h5\">\r\n              Realm: {cultivationRealms[realm.index].name}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box marginLeft=\"auto\" display=\"flex\" alignItems={\"center\"} gap={1}>\r\n            <Box display=\"flex\" flexDirection={\"column\"}>\r\n              <Typography>Game Speed: x{gameSpeed}</Typography>\r\n              <Typography>{playerAction}</Typography>\r\n            </Box>\r\n\r\n            <SettingsOutlinedIcon\r\n              fontSize=\"large\"\r\n              onClick={() => props.setSettings((settings) => !settings)}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\nfunction parseAge(time: number): string {\r\n  const years = Math.floor(time / year);\r\n  // Just in case to not overflow 12 due to rounding\r\n  const months = Math.min(Math.floor((time - years * year) / month), 12);\r\n  return `${years} years ${months} months`;\r\n}\r\n","import {\r\n  LinearProgressProps,\r\n  Box,\r\n  Typography,\r\n  LinearProgress,\r\n} from \"@mui/material\";\r\n\r\nexport default function HealthBar(\r\n  props: LinearProgressProps & { label: string; value: number }\r\n) {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ minWidth: 200 }}>\r\n        <Typography variant=\"body1\" color=\"text.primary\">\r\n          {props.label}\r\n        </Typography>\r\n      </Box>\r\n      <Box sx={{ width: \"50%\", m: 1 }}>\r\n        <LinearProgress variant=\"determinate\" color=\"success\" {...props} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { styled, Tooltip, tooltipClasses, TooltipProps } from \"@mui/material\";\r\n\r\nconst HtmlTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: \"#f5f5f9\",\r\n    color: \"rgba(0, 0, 0, 0.87)\",\r\n    maxWidth: 220,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid #dadde9\",\r\n  },\r\n}));\r\n\r\nexport default HtmlTooltip;\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { TooltipProps, Typography, useTheme } from \"@mui/material\";\r\nimport HtmlTooltip from \"Components/shared/HtmlTooltip\";\r\nimport { PlayerContext, getStatStructure } from \"GameEngine\";\r\n\r\nimport React from \"react\";\r\n\r\nexport default function StatDetailsTooltip(\r\n  props: Omit<TooltipProps, \"title\"> & { stat: string }\r\n) {\r\n  const player = React.useContext(PlayerContext);\r\n  const statStructure = getStatStructure(props.stat, player);\r\n  const parse = useNumberParser();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <HtmlTooltip\r\n      title={\r\n        <>\r\n          <Typography color=\"inherit\">Character {props.stat}</Typography>\r\n          <Typography>\r\n            Base {props.stat}: {parse(statStructure.base)}\r\n          </Typography>\r\n          <Typography>\r\n            Realm bonus:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                statStructure.realm >= 1\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              x{parse(statStructure.realm)}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography>\r\n            Manuals bonus:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                statStructure.manuals >= 1\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              x{parse(statStructure.manuals)}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography>\r\n            Treasures multi:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                statStructure.treasuresMulti >= 1\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              x{parse(statStructure.treasuresMulti)}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography>\r\n            Treasures bonus:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                statStructure.treasures >= 0\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              +{parse(statStructure.treasures)}\r\n            </Typography>\r\n          </Typography>\r\n        </>\r\n      }\r\n    >\r\n      {props.children}\r\n    </HtmlTooltip>\r\n  );\r\n}\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport HealthBar from \"./PlayerStatsPane/HealthBar\";\r\nimport StatDetailsTooltip from \"./PlayerStatsPane/StatDetailsTooltip\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = { displayStats: { name: string; stat: string }[] };\r\n\r\n// Displays current player stats\r\nexport default function PlayerStatsPane(props: Props) {\r\n  const player = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  const { stats, currentStats } = player;\r\n  const { health } = stats;\r\n  const currentHealth = currentStats.health;\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Box\r\n      width={512}\r\n      paddingTop={theme.spacing(1)}\r\n      paddingLeft={theme.spacing(1)}\r\n    >\r\n      <StatDetailsTooltip stat=\"health\">\r\n        <Box>\r\n          <HealthBar\r\n            label={`Health: ${parse(currentHealth)} / ${parse(health)}`}\r\n            value={(currentHealth / health) * 100}\r\n          />\r\n        </Box>\r\n      </StatDetailsTooltip>\r\n      {props.displayStats.map((item) => (\r\n        <StatDetailsTooltip stat={item.stat} key={item.stat}>\r\n          <Typography>\r\n            {item.name} {parse(player.stats[item.stat])}\r\n          </Typography>\r\n        </StatDetailsTooltip>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import { Activity } from \"./Activities/Activities\";\r\n\r\n// ! Travelling mechanic is not implemented yet\r\n// This is a total placeholder\r\nconst Villages: Village[] = [\r\n  {\r\n    name: \"Spring blossom village\",\r\n    description:\r\n      \"A tiny village in the fields. The villagers are poor, but kind and hardworking\",\r\n    imagePath: \"village.png\",\r\n    activities: [\r\n      {\r\n        name: \"Run Errands\",\r\n        description: \"\",\r\n        baseTime: 0.1,\r\n        result: { items: [{ type: \"money\", name: \"Copper Coin\", amount: 1 }] },\r\n      },\r\n      {\r\n        name: \"Use Training Grounds\",\r\n        description: \"\",\r\n        baseTime: 0.1,\r\n        result: { baseStats: { attack: 0.07, defence: 0.07 } },\r\n      },\r\n      {\r\n        name: \"Help in the fields\",\r\n        description: \"\",\r\n        baseTime: 10,\r\n        result: {\r\n          baseStats: { attack: 0.2, defence: 0.2 },\r\n          items: [{ type: \"money\", name: \"Copper Coin\", amount: 5 }],\r\n        },\r\n      },\r\n      {\r\n        name: \"Help in the forge\",\r\n        description: \"\",\r\n        baseTime: 10,\r\n        result: {\r\n          baseStats: { attack: 0.2, defence: 0.2 },\r\n          items: [\r\n            { type: \"treasure\", name: \"Rusty Sword\", amount: 1 },\r\n            { type: \"treasure\", name: \"Rusty Armor\", amount: 1 },\r\n            { type: \"treasure\", name: \"Rusty Helmet\", amount: 1 },\r\n            { type: \"treasure\", name: \"Copper Ring\", amount: 1 },\r\n            { type: \"treasure\", name: \"Copper Pendant\", amount: 1 },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\ntype Village = {\r\n  name: string;\r\n  description: string;\r\n  imagePath: string;\r\n  activities?: Array<Activity>;\r\n};\r\n\r\nexport default Villages;\r\n","// Added due to mui behavior change on v5\r\n// The spacing return value was changed from number to string with 'px' at the end\r\nexport default function getSpacing(theme, value) {\r\n  return Number(theme.spacing(value).slice(0, -2));\r\n}\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport Villages from \"GameConstants/Villages\";\r\nimport getSpacing from \"Utils/getSpacing\";\r\n\r\n// Just a placeholder for now\r\nexport default function PlayerLocationPane() {\r\n  const theme = useTheme();\r\n  const location = Villages[0];\r\n  const src = \"./locations\" + \"/\" + location.imagePath;\r\n  return (\r\n    <Box height={theme.spacing(16)} padding={theme.spacing(1)} width={512}>\r\n      <Typography variant=\"h5\">Current Location</Typography>\r\n      <Box display=\"flex\">\r\n        <img\r\n          src={src}\r\n          alt=\"\"\r\n          height={theme.spacing(12)}\r\n          width={theme.spacing(12)}\r\n        ></img>\r\n        <Box width={512 - getSpacing(theme, 12)} paddingLeft={theme.spacing(1)}>\r\n          <Typography variant=\"h6\">{location.name}</Typography>\r\n          <Typography variant=\"body1\">{location.description}</Typography>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\n\r\ntype CropImageProps = {\r\n  path: string;\r\n  box: { x: number; y: number };\r\n  position: { x: number; y: number };\r\n};\r\nexport function CropImage(props: CropImageProps) {\r\n  const { path, box, position } = props;\r\n  return (\r\n    <Box width={box.x} height={box.y} overflow=\"hidden\">\r\n      <img\r\n        src={path}\r\n        alt=\"copper coin\"\r\n        style={{ top: -position.y, left: -position.x, position: \"relative\" }}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype CropSquareImageProps = {\r\n  path: string;\r\n  size: number;\r\n  position: { x: number; y: number };\r\n};\r\n\r\nexport default function CropSquareImage(props: CropSquareImageProps) {\r\n  const { size, path, position } = props;\r\n  return (\r\n    <CropImage path={path} box={{ x: size, y: size }} position={position} />\r\n  );\r\n}\r\n","import { Box, Button, Typography, useTheme } from \"@mui/material\";\r\nimport CropSquareImage from \"Components/shared/CropImage\";\r\n\r\nimport React from \"react\";\r\nimport getSpacing from \"Utils/getSpacing\";\r\nimport {\r\n  getStatName,\r\n  playerStats,\r\n  playerSkills,\r\n  PlayerContext,\r\n} from \"GameEngine\";\r\nimport { CultivationRealms } from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport {\r\n  InventoryTreasure,\r\n  isInventoryTreasure,\r\n} from \"GameConstants/Interfaces\";\r\nimport { TreasureType } from \"GameConstants/Items\";\r\nimport { currentStats } from \"GameConstants/Player\";\r\nimport { playerCurrentStats } from \"GameEngine/Player/playerCurrentStats\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = {\r\n  treasure: InventoryTreasure | undefined;\r\n  type: TreasureType;\r\n};\r\n\r\n// Player equipment card with its functionality\r\nexport default function EquipmentCard(props: Props) {\r\n  const { treasure, type } = props;\r\n  const theme = useTheme();\r\n  const player = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  let { inventory, stats, currentStats, skills, updateContext } = player;\r\n  if (!treasure)\r\n    return (\r\n      <Box width={512} border=\"1px solid gray\" borderRadius={theme.spacing(1)}>\r\n        <Box display=\"flex\" margin={theme.spacing(1)}>\r\n          <Box width={32} height={32} bgcolor=\"lightgray\"></Box>\r\n          <Box marginLeft={theme.spacing(1)} marginTop={theme.spacing(-1)}>\r\n            <Typography>Nothing ({type})</Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  const { image, name, realmIndex, stats: itemStats } = treasure.item;\r\n  const { path, sizeX: size, x, y } = image;\r\n  const realm = CultivationRealms[realmIndex];\r\n\r\n  // Prepare treausre description\r\n  const TreasureDescription: TreasureDescriptionStatsLine[] = [];\r\n  if (itemStats.stats) {\r\n    for (const [key, value] of Object.entries(itemStats.stats)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value),\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.skills) {\r\n    for (const [key, value] of Object.entries(itemStats.skills)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value),\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.statsMulti) {\r\n    for (const [key, value] of Object.entries(itemStats.statsMulti)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value * 100) + \"%\",\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.skillsMulti) {\r\n    for (const [key, value] of Object.entries(itemStats.skillsMulti)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value * 100) + \"%\",\r\n      });\r\n    }\r\n  }\r\n\r\n  const unequipItem = (id: string) => {\r\n    const index = inventory.items.findIndex((item) => item.id === id);\r\n    if (index === -1) return;\r\n    const treasure = inventory[index];\r\n    if (!isInventoryTreasure(treasure)) return;\r\n    (inventory[index] as InventoryTreasure).isEquipped = false;\r\n\r\n    stats = playerStats(player);\r\n    currentStats = playerCurrentStats(player);\r\n    skills = playerSkills(player);\r\n    updateContext({ inventory, stats, currentStats, skills });\r\n  };\r\n  return (\r\n    <Box width={512} border=\"1px solid gray\" borderRadius={theme.spacing(1)}>\r\n      <Box margin={theme.spacing(1)}>\r\n        <Box width={512} display=\"flex\">\r\n          <CropSquareImage path={path} size={size} position={{ x: x, y: y }} />\r\n          <Box marginLeft={theme.spacing(1)} marginTop={theme.spacing(-1)}>\r\n            <Typography>\r\n              {name} ({type})\r\n            </Typography>\r\n            <Typography>{realm.name}</Typography>\r\n          </Box>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"warning\"\r\n            size=\"small\"\r\n            sx={{ maxHeight: 32, minHeight: 32, margin: \"auto\" }}\r\n            onClick={() => unequipItem(treasure.id)}\r\n          >\r\n            Unequip\r\n          </Button>\r\n        </Box>\r\n        {TreasureDescription.map((item, index) => (\r\n          <Typography\r\n            key={index}\r\n            variant=\"body1\"\r\n            marginLeft={`${32 + getSpacing(theme, 1)}px`}\r\n          >\r\n            {item.text} {item.effect}\r\n          </Typography>\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype TreasureDescriptionStatsLine = {\r\n  text: string;\r\n  effect: string;\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport EquipmentCard from \"./Equipment/EquipmentCard\";\r\n\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport {\r\n  isInventoryTreasure,\r\n  InventoryTreasure,\r\n} from \"GameConstants/Interfaces\";\r\nimport { PlayerEquipment } from \"GameConstants/Player\";\r\n\r\n// Player equipment\r\nexport default function Equipment() {\r\n  const { inventory } = React.useContext(PlayerContext);\r\n  const equippedItems = inventory.getEquippedItems();\r\n  const EquipCards: Array<JSX.Element> = [];\r\n  for (let itemType of PlayerEquipment) {\r\n    const treasure = (equippedItems as InventoryTreasure[]).find(\r\n      (item) => item.item.type === itemType\r\n    );\r\n    EquipCards.push(\r\n      <EquipmentCard treasure={treasure} type={itemType} key={itemType} />\r\n    );\r\n  }\r\n  return <Box>{EquipCards}</Box>;\r\n}\r\n","import { Box, Button } from \"@mui/material\";\r\nimport KeyboardArrowLeftIcon from \"@mui/icons-material/KeyboardArrowLeft\";\r\nimport KeyboardDoubleArrowLeftIcon from \"@mui/icons-material/KeyboardDoubleArrowLeft\";\r\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport KeyboardDoubleArrowRightIcon from \"@mui/icons-material/KeyboardDoubleArrowRight\";\r\nimport { InventoryPages } from \"../Inventory\";\r\n\r\ntype Props = {\r\n  pages: InventoryPages;\r\n  setPages: React.Dispatch<React.SetStateAction<InventoryPages>>;\r\n};\r\n\r\n// A panel below the inventory, that allows switching inventory pages\r\nexport default function InventoryBottomPanel(props: Props) {\r\n  const { pages, setPages } = props;\r\n  return (\r\n    <Box width={512} height={24}>\r\n      <Button\r\n        onClick={() =>\r\n          setPages((pages) => ({ current: 1, total: pages.total }))\r\n        }\r\n        disabled={pages.current === 1}\r\n        sx={{ maxWidth: 24, minWidth: 24 }}\r\n      >\r\n        <KeyboardDoubleArrowLeftIcon />\r\n      </Button>\r\n      <Button\r\n        onClick={() =>\r\n          setPages((pages) => ({\r\n            current: pages.current - 1,\r\n            total: pages.total,\r\n          }))\r\n        }\r\n        disabled={pages.current === 1}\r\n        sx={{ maxWidth: 24, minWidth: 24 }}\r\n      >\r\n        <KeyboardArrowLeftIcon />\r\n      </Button>\r\n      <Button\r\n        onClick={() =>\r\n          setPages((pages) => ({\r\n            current: pages.current + 1,\r\n            total: pages.total,\r\n          }))\r\n        }\r\n        disabled={pages.current === pages.total}\r\n        sx={{ maxWidth: 24, minWidth: 24 }}\r\n      >\r\n        <KeyboardArrowRightIcon />\r\n      </Button>\r\n      <Button\r\n        onClick={() =>\r\n          setPages((pages) => ({ current: pages.total, total: pages.total }))\r\n        }\r\n        disabled={pages.current === pages.total}\r\n        sx={{ maxWidth: 24, minWidth: 24 }}\r\n      >\r\n        <KeyboardDoubleArrowRightIcon />\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Button } from \"@mui/material\";\r\nimport { InventoryFilters } from \"../Inventory\";\r\n\r\ntype Props = {\r\n  type: InventoryFilters;\r\n  setType: React.Dispatch<React.SetStateAction<InventoryFilters>>;\r\n};\r\n\r\n// Filter panel to the right of the inventory grid\r\nexport default function InventoryFiltersPane(props: Props) {\r\n  const { type, setType } = props;\r\n  return (\r\n    <Box width={128} height={512 - 128}>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => setType(\"all\")}\r\n        color={type === \"all\" ? \"success\" : \"primary\"}\r\n        fullWidth\r\n      >\r\n        all\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => setType(\"money\")}\r\n        color={type === \"money\" ? \"success\" : \"primary\"}\r\n        fullWidth\r\n      >\r\n        money\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => setType(\"treasure\")}\r\n        color={type === \"treasure\" ? \"success\" : \"primary\"}\r\n        fullWidth\r\n      >\r\n        treasures\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => setType(\"mineral\")}\r\n        color={type === \"mineral\" ? \"success\" : \"primary\"}\r\n        fullWidth\r\n      >\r\n        minerals\r\n      </Button>\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => setType(\"herb\")}\r\n        color={type === \"herb\" ? \"success\" : \"primary\"}\r\n        fullWidth\r\n      >\r\n        Herbs\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\n\r\n// Just a placeholder white square for grids\r\nexport default function EmptyCell() {\r\n  return <Box width={64} height={64} border=\"1px solid gray\" />;\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport LockOpenOutlinedIcon from \"@mui/icons-material/LockOpenOutlined\";\r\n\r\nexport default function LockIcon(props: {\r\n  isLocked: boolean;\r\n  fontSize?: \"small\" | \"inherit\" | \"medium\" | \"large\";\r\n}) {\r\n  const { isLocked, fontSize } = props;\r\n  return (\r\n    <Box>\r\n      {isLocked ? (\r\n        <LockOutlinedIcon fontSize={fontSize || \"medium\"} />\r\n      ) : (\r\n        <LockOpenOutlinedIcon fontSize={fontSize || \"medium\"} />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Button,\r\n  ClickAwayListener,\r\n  Popper,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport CropSquareImage from \"Components/shared/CropImage\";\r\n\r\nimport React from \"react\";\r\nimport EmptyCell from \"./EmptyCell\";\r\nimport {\r\n  PlayerContext,\r\n  playerStats,\r\n  playerSkills,\r\n  getStatName,\r\n} from \"GameEngine\";\r\nimport { CultivationRealms } from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport {\r\n  InventoryTreasure,\r\n  InventoryUniqueItem,\r\n  isInventoryTreasure,\r\n} from \"GameConstants/Interfaces\";\r\nimport { TreasureType } from \"GameConstants/Items\";\r\nimport LockIcon from \"Components/shared/LockIcon\";\r\nimport { playerCurrentStats } from \"GameEngine/Player/playerCurrentStats\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Draw inventory treasure item\r\nexport default function InventoryTreasureItem(props: InventoryTreasure) {\r\n  const { item: treasure, isLocked } = props;\r\n\r\n  const realmName = CultivationRealms[treasure.realmIndex].name;\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const parse = useNumberParser();\r\n  const player = React.useContext(PlayerContext);\r\n  let { inventory, stats, skills, currentStats, updateContext } = player;\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(anchorEl ? null : event.currentTarget);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const dropItem = (id: string) => {\r\n    const index = inventory.items.findIndex((item) => item.id === id);\r\n    if (index === -1 || (inventory[index] as any).isLocked) return;\r\n    inventory.items.splice(index, 1);\r\n    updateContext({ inventory });\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const equipItem = (id: string, type: TreasureType) => {\r\n    const index = inventory.items.findIndex((item) => item.id === id);\r\n    if (index === -1) return;\r\n    // Check equipped items\r\n    const equippedIndex = inventory.items.findIndex(\r\n      (item) =>\r\n        isInventoryTreasure(item) && item.isEquipped && item.item.type === type\r\n    );\r\n    // Unequip item of the same type\r\n    if (equippedIndex !== -1)\r\n      (inventory[equippedIndex] as InventoryTreasure).isEquipped = false;\r\n    (inventory[index] as InventoryTreasure).isEquipped = true;\r\n    stats = playerStats(player);\r\n    currentStats = playerCurrentStats(player);\r\n    skills = playerSkills(player);\r\n    updateContext({ inventory, stats, currentStats, skills });\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const toggleItemLock = (id: string) => {\r\n    const index = inventory.items.findIndex((item) => item.id === id);\r\n    if (index === -1) return;\r\n    (inventory[index] as InventoryUniqueItem).isLocked = !(\r\n      inventory[index] as InventoryUniqueItem\r\n    ).isLocked;\r\n    updateContext({ inventory });\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popper\" : undefined;\r\n  if (!treasure) return <EmptyCell />;\r\n\r\n  const TreasureDescription: TreasureDescriptionStatsLine[] = [];\r\n  const { stats: itemStats } = treasure;\r\n  if (itemStats.stats) {\r\n    for (const [key, value] of Object.entries(itemStats.stats)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value),\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.skills) {\r\n    for (const [key, value] of Object.entries(itemStats.skills)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value),\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.statsMulti) {\r\n    for (const [key, value] of Object.entries(itemStats.statsMulti)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value * 100) + \"%\",\r\n      });\r\n    }\r\n  }\r\n  if (itemStats.skillsMulti) {\r\n    for (const [key, value] of Object.entries(itemStats.skillsMulti)) {\r\n      TreasureDescription.push({\r\n        text: getStatName(key),\r\n        effect: parse(value * 100) + \"%\",\r\n      });\r\n    }\r\n  }\r\n\r\n  const trimmedRealmName =\r\n    realmName.substring(0, 6) + \" \" + realmName.charAt(realmName.length - 1);\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <Box>\r\n        <Box\r\n          width={64}\r\n          height={64}\r\n          border=\"1px solid gray\"\r\n          display=\"flex\"\r\n          flexDirection=\"column\"\r\n          sx={{ justifyContent: \"space-around\", alignItems: \"center\" }}\r\n          onClick={handleClick}\r\n        >\r\n          <Box>\r\n            <CropSquareImage\r\n              path={treasure.image.path}\r\n              size={treasure.image.sizeX}\r\n              position={{ x: treasure.image.x, y: treasure.image.y }}\r\n            />\r\n          </Box>\r\n          <Box>\r\n            <Typography variant=\"body2\">{trimmedRealmName}</Typography>\r\n          </Box>\r\n        </Box>\r\n        <Popper id={id} open={open} anchorEl={anchorEl}>\r\n          <Box sx={{ border: 1, p: 1, bgcolor: \"background.paper\" }}>\r\n            <Box display=\"flex\" justifyContent={\"space-between\"}>\r\n              <Typography>{treasure.name}</Typography>\r\n              <Box onClick={() => toggleItemLock(props.id)}>\r\n                <LockIcon isLocked={isLocked || false} />\r\n              </Box>\r\n            </Box>\r\n\r\n            <Typography>Quality: {parse(treasure.quality)}</Typography>\r\n            {TreasureDescription.map((item, index) => (\r\n              <Typography key={index} variant=\"body1\">\r\n                {item.text} {item.effect}\r\n              </Typography>\r\n            ))}\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => equipItem(props.id, props.item.type)}\r\n            >\r\n              Equip\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"warning\"\r\n              onClick={() => dropItem(props.id)}\r\n            >\r\n              Drop\r\n            </Button>\r\n          </Box>\r\n        </Popper>\r\n      </Box>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n\r\ntype TreasureDescriptionStatsLine = {\r\n  text: string;\r\n  effect: string;\r\n};\r\n","import { Herbs } from \"GameConstants/Items/Herbs\";\r\nimport { ItemType } from \"GameConstants/Interfaces\";\r\nimport { Minerals } from \"GameConstants/Items/Minerals\";\r\nimport Money from \"GameConstants/Items/Money\";\r\nimport Treasures from \"GameConstants/Items/Treasures\";\r\n\r\nexport default function findItemDescription(name: string, type: ItemType) {\r\n  let description;\r\n  if (type === \"treasure\")\r\n    description = Treasures.find((item) => item.name === name);\r\n  if (type === \"money\") description = Money.find((item) => item.name === name);\r\n  if (type === \"mineral\")\r\n    description = Minerals.find((item) => item.name === name);\r\n  if (type === \"herb\") description = Herbs.find((item) => item.name === name);\r\n  return description;\r\n}\r\n","import { Box, TooltipProps, Typography } from \"@mui/material\";\r\nimport CropSquareImage from \"Components/shared/CropImage\";\r\nimport HtmlTooltip from \"Components/shared/HtmlTooltip\";\r\nimport {\r\n  Material,\r\n  InventoryCountableItem as Type,\r\n} from \"GameConstants/Interfaces\";\r\nimport EmptyCell from \"./EmptyCell\";\r\nimport { MoneyType } from \"GameConstants/Items\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Draw inventory money item\r\nexport default function InventoryCountableItem(props: Type) {\r\n  const { name, amount, type } = props;\r\n  const parse = useNumberParser();\r\n  // Find image\r\n  const cellData: MoneyType | Material | undefined = findItemDescription(\r\n    name,\r\n    type\r\n  );\r\n  if (!cellData) return <EmptyCell />;\r\n  return (\r\n    <CountableCellTooltip name={name} description={cellData.description}>\r\n      <Box\r\n        width={64}\r\n        height={64}\r\n        border=\"1px solid gray\"\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        sx={{ justifyContent: \"space-around\", alignItems: \"center\" }}\r\n      >\r\n        <Box>\r\n          <CropSquareImage\r\n            path={cellData.image.path}\r\n            size={cellData.image.sizeX}\r\n            position={{ x: cellData.image.x, y: cellData.image.y }}\r\n          />\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"body2\">{parse(amount)}</Typography>\r\n        </Box>\r\n      </Box>\r\n    </CountableCellTooltip>\r\n  );\r\n}\r\n\r\ntype CountableTooltipProps = Omit<TooltipProps, \"title\"> & {\r\n  name: string;\r\n  description: string;\r\n};\r\n\r\nfunction CountableCellTooltip(props: CountableTooltipProps) {\r\n  const { name, description } = props;\r\n  return (\r\n    <HtmlTooltip\r\n      title={\r\n        <>\r\n          <Typography color=\"inherit\">{name}</Typography>\r\n          <Typography variant=\"body2\">{description}</Typography>\r\n        </>\r\n      }\r\n    >\r\n      {props.children}\r\n    </HtmlTooltip>\r\n  );\r\n}\r\n","import EmptyCell from \"./EmptyCell\";\r\nimport InventoryTreasureItem from \"./InventoryTreasureItem\";\r\nimport InventoryCountableItem from \"./InventoryCountableItem\";\r\nimport { InventoryItem } from \"GameConstants/Interfaces\";\r\n\r\ntype GridItemProps = {\r\n  item: InventoryItem | undefined;\r\n};\r\n\r\n// Draw inventory tile based on item type\r\nexport default function InventoryGridItem(props: GridItemProps) {\r\n  const { item } = props;\r\n\r\n  if (!item) return <EmptyCell />;\r\n  else if (item.type === \"money\") return <InventoryCountableItem {...item} />;\r\n  else if (item.type === \"mineral\") return <InventoryCountableItem {...item} />;\r\n  else if (item.type === \"herb\") return <InventoryCountableItem {...item} />;\r\n  else if (item.type === \"treasure\") return <InventoryTreasureItem {...item} />;\r\n\r\n  return <EmptyCell />;\r\n}\r\n","import { Box } from \"@mui/material\";\r\n\r\nimport InventoryGridItem from \"./InventoryGrid/InventoryGridItem\";\r\nimport { InventoryItem } from \"GameConstants/Interfaces\";\r\n\r\n// Player inventory\r\nexport default function InventoryGrid(props: { inventory: any[] }) {\r\n  const { inventory } = props;\r\n\r\n  const length =\r\n    inventory.length === 0 ? 36 : Math.ceil(inventory.length / 36) * 36;\r\n  const tileIndex = Array(length)\r\n    .fill(0)\r\n    .map((element, index) => index);\r\n\r\n  const Tiles = tileIndex.map((value) => ({\r\n    item: inventory[value] || undefined,\r\n    index: value,\r\n  }));\r\n\r\n  return (\r\n    <Box width={512 - 128} height={512 - 128} display=\"flex\" flexWrap=\"wrap\">\r\n      {Tiles.map((tile) => (\r\n        <InventoryGridItem key={tile.index} item={tile.item} />\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport {\r\n  CountableItems,\r\n  InventoryUniqueItem,\r\n  UniqueItems,\r\n} from \"GameConstants/Interfaces\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\n// Options for the realm selection menu\r\nconst Realms: Realm[] = [\r\n  {\r\n    label: \"Mortal\",\r\n    index: 8,\r\n  },\r\n  {\r\n    label: \"Body Ref.\",\r\n    index: 17,\r\n  },\r\n  {\r\n    label: \"Qi Gath.\",\r\n    index: 26,\r\n  },\r\n];\r\n\r\n// Options for the type selector menu\r\nconst ItemTypes: Array<string> = UniqueItems.map((x) => x);\r\nItemTypes.unshift(\"all\");\r\n\r\nexport default function AutosellPanel() {\r\n  const { inventory, updateContext } = React.useContext(PlayerContext);\r\n  // Type field manager\r\n  const [type, setType] = React.useState<string>(ItemTypes[0]);\r\n  const typeSelectChange = (event: SelectChangeEvent) => {\r\n    setType(event.target.value);\r\n  };\r\n  // Realm field manager\r\n  const [realm, setRealm] = React.useState<Realm>(Realms[0]);\r\n  const realmSelectChange = (event: SelectChangeEvent) => {\r\n    const realm_index = parseInt(event.target.value);\r\n    const newRealm = Realms.find((item) => item.index === realm_index);\r\n    if (!newRealm) return;\r\n    setRealm(newRealm);\r\n  };\r\n\r\n  // Quality field manager\r\n  const [quality, setQuality] = React.useState<number>(1);\r\n  const qualityFieldChange = (event) => {\r\n    const q = parseInt(event.target.value);\r\n    if (isNaN(q)) return;\r\n    setQuality(q);\r\n  };\r\n  // Autosell checkbox manager\r\n  const [isActive, setActive] = React.useState<boolean>(false);\r\n\r\n  // Run Autosell\r\n  React.useEffect(() => {\r\n    const autosellInterval = setInterval(() => {\r\n      if (!isActive) return;\r\n      inventory.items = inventory.items.filter((item) => {\r\n        if (CountableItems.includes(item.type as any)) return true; // autosell does not sell countable items\r\n        // For InventoryUniqueItems\r\n        const uItem = item as InventoryUniqueItem;\r\n        if (uItem.isEquipped || uItem.isLocked) return true; // equipped and locked items are not sold\r\n        const itemType = uItem.type;\r\n        const itemRealm = uItem.item.realmIndex;\r\n        const itemQuality = uItem.item.quality;\r\n        if (type !== \"all\" && itemType !== type) return true; // types does not match\r\n        if (type === \"all\" || itemType === type) {\r\n          if (itemRealm <= realm.index && itemQuality <= quality) return false; // sell item\r\n        }\r\n        return true;\r\n      });\r\n      updateContext({ inventory: JSON.parse(JSON.stringify(inventory)) });\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(autosellInterval);\r\n    };\r\n  }, [type, realm, quality, isActive]);\r\n  return (\r\n    <Box\r\n      marginTop={2}\r\n      display=\"flex\"\r\n      gap={2}\r\n      alignItems={\"center\"}\r\n      flexWrap={\"wrap\"}\r\n    >\r\n      <Box>\r\n        <FormControl>\r\n          <InputLabel id=\"type-label\">Type</InputLabel>\r\n          <Select\r\n            labelId=\"type-label\"\r\n            value={type}\r\n            label=\"Type\"\r\n            onChange={typeSelectChange}\r\n          >\r\n            {ItemTypes.map((type) => (\r\n              <MenuItem value={type} key={type}>\r\n                {type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      <Box>\r\n        <FormControl>\r\n          <InputLabel id=\"realm-label\">Realm</InputLabel>\r\n          <Select\r\n            labelId=\"realm-label\"\r\n            value={realm.index.toString()}\r\n            label=\"Realm\"\r\n            onChange={realmSelectChange}\r\n          >\r\n            {Realms.map((realm) => (\r\n              <MenuItem value={realm.index} key={realm.index}>\r\n                {realm.label}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      <Box maxWidth={120}>\r\n        <TextField\r\n          id=\"quality\"\r\n          label=\"Quality\"\r\n          variant=\"outlined\"\r\n          onChange={qualityFieldChange}\r\n          value={quality}\r\n        />\r\n      </Box>\r\n      <FormGroup>\r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox checked={isActive} onClick={() => setActive(!isActive)} />\r\n          }\r\n          label=\"Autosell\"\r\n        />\r\n      </FormGroup>\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype Realm = { label: string; index: number };\r\n","import { Box } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport InventoryBottomPanel from \"./Inventory/InventoryBottomPanel\";\r\nimport InventoryFiltersPane from \"./Inventory/InventoryFilters\";\r\nimport InventoryGrid from \"./Inventory/InventoryGrid\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport { isInventoryTreasure } from \"GameConstants/Interfaces\";\r\nimport AutosellPanel from \"./Inventory/AutosellPanel\";\r\n\r\nexport type InventoryFilters =\r\n  | \"all\"\r\n  | \"money\"\r\n  | \"treasure\"\r\n  | \"mineral\"\r\n  | \"herb\";\r\n\r\nexport default function Inventory() {\r\n  const { inventory } = React.useContext(PlayerContext);\r\n  const [type, setType] = React.useState<InventoryFilters>(\"all\");\r\n  // Filter equipped items\r\n  let displayedInventory = inventory.items.filter((item) => {\r\n    if (!isInventoryTreasure(item)) return true;\r\n    else {\r\n      return !item.isEquipped;\r\n    }\r\n  });\r\n\r\n  // Filter according to type\r\n  if (type !== \"all\") {\r\n    displayedInventory = displayedInventory.filter(\r\n      (item) => item.type === type\r\n    );\r\n  }\r\n\r\n  const [pages, setPages] = React.useState<InventoryPages>({\r\n    current: 1,\r\n    total: Math.ceil(displayedInventory.length / 36),\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    setPages((pages) => {\r\n      const total = Math.max(Math.ceil(displayedInventory.length / 36), 1);\r\n      return { current: Math.min(pages.current, total), total };\r\n    });\r\n  }, [displayedInventory.length]);\r\n\r\n  // Select inventory for the page\r\n  const inventoryPage = displayedInventory.slice(\r\n    (pages.current - 1) * 36,\r\n    Math.min(pages.current * 36, displayedInventory.length)\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\">\r\n        <InventoryGrid inventory={inventoryPage} />\r\n        <InventoryFiltersPane type={type} setType={setType} />\r\n      </Box>\r\n      <InventoryBottomPanel pages={pages} setPages={setPages} />\r\n      <AutosellPanel />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport type InventoryPages = {\r\n  current: number;\r\n  total: number;\r\n};\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Typography, useTheme } from \"@mui/material\";\r\nimport { PlayerContext, getStatName } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\n// Player baseStats display\r\nexport default function Stats() {\r\n  const { baseStats } = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  const theme = useTheme();\r\n\r\n  let description: Array<JSX.Element> = [];\r\n  for (const [key, value] of Object.entries(baseStats)) {\r\n    description.push(\r\n      <Typography key={key}>\r\n        {getStatName(key)}: {parse(value)}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box paddingTop={theme.spacing(1)} paddingLeft={theme.spacing(1)}>\r\n      <Typography>Base stats</Typography>\r\n      {description}\r\n    </Box>\r\n  );\r\n}\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { TooltipProps, Typography, useTheme } from \"@mui/material\";\r\nimport HtmlTooltip from \"Components/shared/HtmlTooltip\";\r\nimport { PlayerContext, getSkillStructure } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\n// Provides description\r\nexport default function SkillDetailsTooltip(\r\n  props: Omit<TooltipProps, \"title\"> & { skill: string }\r\n) {\r\n  const player = React.useContext(PlayerContext);\r\n  const skillStructure = getSkillStructure(props.skill, player);\r\n  const parse = useNumberParser();\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <HtmlTooltip\r\n      title={\r\n        <>\r\n          <Typography color=\"inherit\">Character {props.skill}</Typography>\r\n          <Typography>\r\n            Base {props.skill}: {parse(skillStructure.base)}\r\n          </Typography>\r\n\r\n          <Typography>\r\n            Manuals multi:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                skillStructure.manuals >= 1\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              x{parse(skillStructure.manuals)}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography>\r\n            Treasures Multi:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                skillStructure.treasuresMulti >= 1\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              x{parse(skillStructure.treasuresMulti)}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography>\r\n            Treasures bonus:\r\n            <Typography\r\n              component=\"span\"\r\n              color={\r\n                skillStructure.treasures >= 0\r\n                  ? theme.palette.success.main\r\n                  : theme.palette.error.main\r\n              }\r\n              display=\"inline\"\r\n            >\r\n              {\" \"}\r\n              +{parse(skillStructure.treasures)}\r\n            </Typography>\r\n          </Typography>\r\n        </>\r\n      }\r\n    >\r\n      {props.children}\r\n    </HtmlTooltip>\r\n  );\r\n}\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport SkillDetailsTooltip from \"./Skills/SkillDetailTooltip\";\r\nimport { PlayerContext, getStatName } from \"GameEngine\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Bad coding here. #todo: make it a .map() render\r\nexport default function Skills() {\r\n  const { skills } = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  const theme = useTheme();\r\n\r\n  let description: Array<JSX.Element> = [];\r\n  for (const [key, value] of Object.entries(skills)) {\r\n    description.push(\r\n      <SkillDetailsTooltip skill={key} key={key}>\r\n        <Typography key={key}>\r\n          {getStatName(key)}: {parse(value)}\r\n        </Typography>\r\n      </SkillDetailsTooltip>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box paddingTop={theme.spacing(1)} paddingLeft={theme.spacing(1)}>\r\n      {description}\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Button, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport Equipment from \"./PlayerStatsLayout/Equipment\";\r\nimport Inventory from \"./PlayerStatsLayout/Inventory\";\r\nimport Stats from \"./PlayerStatsLayout/Stats\";\r\nimport Skills from \"./PlayerStatsLayout/Skills\";\r\n\r\ntype Layout = \"inventory\" | \"equipment\" | \"stats\" | \"skills\";\r\n\r\n// Menu to switch between inventory, equipment and player stats displays\r\nexport default function PlayerStatsLayout() {\r\n  const [panel, selectPanel] = React.useState<Layout>(\"inventory\");\r\n  const theme = useTheme();\r\n  return (\r\n    <>\r\n      <Box width={512} height={32} paddingBottom={theme.spacing(5)}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => selectPanel(\"inventory\")}\r\n          color={panel === \"inventory\" ? \"success\" : \"primary\"}\r\n        >\r\n          Inventory\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => selectPanel(\"equipment\")}\r\n          color={panel === \"equipment\" ? \"success\" : \"primary\"}\r\n        >\r\n          Equipment\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => selectPanel(\"stats\")}\r\n          color={panel === \"stats\" ? \"success\" : \"primary\"}\r\n        >\r\n          Stats\r\n        </Button>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => selectPanel(\"skills\")}\r\n          color={panel === \"skills\" ? \"success\" : \"primary\"}\r\n        >\r\n          Skills\r\n        </Button>\r\n      </Box>\r\n      <Box width={512} height={512} overflow=\"auto\">\r\n        {panel === \"inventory\" ? <Inventory /> : \"\"}\r\n        {panel === \"equipment\" ? <Equipment /> : \"\"}\r\n        {panel === \"stats\" ? <Stats /> : \"\"}\r\n        {panel === \"skills\" ? <Skills /> : \"\"}\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport PlayerStatsPane from \"./LeftSideBar/PlayerStatsPane\";\r\nimport PlayerLocationPane from \"./LeftSideBar/PlayerLocationPane\";\r\nimport PlayerStatsLayout from \"./LeftSideBar/PlayerStatsLayout\";\r\n\r\nexport default function LeftSideBar() {\r\n  return (\r\n    <Box borderRight={\"1px solid gray\"}>\r\n      <PlayerStatsPane\r\n        displayStats={[\r\n          { name: \"Health Regen\", stat: \"healthRegen\" },\r\n          { name: \"Attack\", stat: \"attack\" },\r\n          { name: \"Defence\", stat: \"defence\" },\r\n          { name: \"Insight\", stat: \"insight\" },\r\n        ]}\r\n      />\r\n      <PlayerStatsLayout />\r\n      <PlayerLocationPane />\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  LinearProgress,\r\n  LinearProgressProps,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\ntype Props = {\r\n  label: string;\r\n  value: number;\r\n  rightLabel?: boolean;\r\n} & LinearProgressProps;\r\n\r\nexport default function ProgressBar(props: Props) {\r\n  const { label, rightLabel, ...rest } = props;\r\n  const isRight = rightLabel;\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      {!isRight && (\r\n        <Typography variant=\"body1\" color=\"text.primary\">\r\n          {label}\r\n        </Typography>\r\n      )}\r\n      <Box sx={{ width: \"60%\", m: 1 }}>\r\n        <LinearProgress variant=\"determinate\" color=\"primary\" {...rest} />\r\n      </Box>\r\n      {isRight && (\r\n        <Typography variant=\"body1\" color=\"text.primary\">\r\n          {label}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import { year, month } from \"GameConstants/Constants\";\r\n\r\n// Parses time from milliseconds to human readable ingame format\r\nexport default function parseTime(time: number): string {\r\n  const years = Math.floor(time / year);\r\n  // Just in case to not overflow 12 due to rounding\r\n  const months = Math.min((time - years * year) / month, 12);\r\n  return years !== 0\r\n    ? `${years} y ${months.toPrecision(2)} m`\r\n    : `${months.toPrecision(2)} m`;\r\n}\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport { ActivitiesFunctions, Activity } from \"GameConstants/Activities\";\r\nimport { PlayerBaseStats, PlayerSkills } from \"GameConstants/Player\";\r\nimport { PlayerContext, getStatName } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n  stats: Partial<PlayerBaseStats> | Partial<PlayerSkills>;\r\n  requiredTime?: number;\r\n  activity: Activity;\r\n  multiplicatorFunctionName?: string;\r\n};\r\n\r\nexport default function ActivityStatsDescription(props: Props) {\r\n  const player = React.useContext(PlayerContext);\r\n  const { stats, activity, multiplicatorFunctionName, requiredTime } = props;\r\n  const parse = useNumberParser();\r\n  // Display the  description\r\n  const StatsDescription: StatsLine[] = [];\r\n  for (const [key, value] of Object.entries(stats)) {\r\n    StatsDescription.push({\r\n      text: getStatName(key),\r\n      effect:\r\n        value *\r\n        (multiplicatorFunctionName\r\n          ? ActivitiesFunctions[multiplicatorFunctionName](activity, player)\r\n          : 1),\r\n    });\r\n  }\r\n  return (\r\n    <Box display=\"flex\" gap={1}>\r\n      {StatsDescription.map((item) => (\r\n        <Typography key={item.text} variant=\"body1\" display=\"inline\">\r\n          {item.text}{\" \"}\r\n          {requiredTime\r\n            ? requiredTime > 1000\r\n              ? parse(item.effect)\r\n              : parse((item.effect / requiredTime) * 1000)\r\n            : \"\"}\r\n        </Typography>\r\n      ))}\r\n      {requiredTime && requiredTime < 1000 ? \"/s\" : \"\"}\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype StatsLine = {\r\n  text: string;\r\n  effect: number;\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport CropSquareImage from \"./CropImage\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\nimport { ActivityItem } from \"GameConstants/Activities/Activities\";\r\n\r\ntype Props = {\r\n  items: ActivityItem[];\r\n};\r\n\r\n// Generates item descriptions in the format Image Name Amount\r\nexport default function ItemImages(props: Props) {\r\n  const { items } = props;\r\n  let result: JSX.Element[] = [];\r\n  let i = 0;\r\n  for (let item of items) {\r\n    i++;\r\n    const description = findItemDescription(item.name, item.type);\r\n    if (!description) continue;\r\n    const { path, sizeX: size, x, y } = description.image;\r\n    result.push(\r\n      <Box key={i} display=\"flex\">\r\n        <CropSquareImage path={path} size={size} position={{ x, y }} />\r\n      </Box>\r\n    );\r\n  }\r\n  return <Box>{result.map((item) => item)}</Box>;\r\n}\r\n","import { Box, Paper, Typography, useTheme } from \"@mui/material\";\r\nimport ProgressBar from \"../shared/ProgressBar\";\r\nimport React from \"react\";\r\nimport parseTime from \"Utils/parseTime\";\r\nimport { ActivityCardProps } from \"./types\";\r\nimport itemImages from \"../shared/ItemImages\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport { ActivitiesFunctions } from \"GameConstants/Activities\";\r\nimport { defaultUpdateInterval } from \"GameConstants/Constants\";\r\nimport ItemImages from \"../shared/ItemImages\";\r\nimport ActivityStatsDescription from \"Components/shared/ActivityStatsDescription\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Activity panel for activity without price, shows result image in the top right corner\r\nexport default function GatheringActivityCard(props: ActivityCardProps) {\r\n  const { activity, isActive, source } = props;\r\n  const player = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  const { updateContext } = player;\r\n  const { result, price } = activity;\r\n  const theme = useTheme();\r\n\r\n  const handleClick = () => {\r\n    // If training is active\r\n    if (isActive)\r\n      updateContext({ state: { action: \"idle\", activity: undefined } });\r\n    // Set active training\r\n    else {\r\n      updateContext({\r\n        state: {\r\n          action: \"activity\",\r\n          activity: { name: activity.name, source },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const ItemRewardDescription: ItemLine[] = [];\r\n  if (result.items) {\r\n    for (let item of result.items) {\r\n      ItemRewardDescription.push({\r\n        name: item.name,\r\n        amount: item.amount,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Determine remaining time for timed activities\r\n  const requiredTime = activity.time\r\n    ? ActivitiesFunctions[activity.time](activity, player)\r\n    : activity.baseTime;\r\n  const currentTime = activity.currentTime || 0;\r\n\r\n  // Change some displayed effects if action is really fast\r\n  const fastAction = requiredTime / defaultUpdateInterval < 5;\r\n  const progressBarLabel =\r\n    requiredTime < 1000\r\n      ? (1000 / requiredTime).toFixed(2) + \"/s\"\r\n      : parseTime(requiredTime);\r\n  return (\r\n    <Paper\r\n      elevation={8}\r\n      sx={{\r\n        paddingX: theme.spacing(2),\r\n        paddingY: theme.spacing(1),\r\n        margin: theme.spacing(2),\r\n        borderRadius: theme.spacing(2),\r\n        minHeight: 60,\r\n        border: \"1px solid lightgray\",\r\n        borderColor: isActive ? theme.palette.primary.main : \"lightgray\",\r\n        padding: theme.spacing(1),\r\n      }}\r\n    >\r\n      <Box display={\"flex\"}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection={\"column\"}\r\n          justifyContent={\"space-between\"}\r\n          minWidth={price ? 400 : 600}\r\n          minHeight={60}\r\n          height=\"100%\"\r\n          onClick={() => handleClick()}\r\n        >\r\n          <Box display=\"flex\">\r\n            <Box display=\"flex\" flexDirection={\"column\"}>\r\n              <Typography>{activity.name}</Typography>\r\n              {result.baseStats && (\r\n                <ActivityStatsDescription\r\n                  stats={result.baseStats}\r\n                  activity={activity}\r\n                  requiredTime={requiredTime}\r\n                  multiplicatorFunctionName={result.baseStatsMulti}\r\n                />\r\n              )}\r\n\r\n              {ItemRewardDescription.length > 0 && (\r\n                <Box display=\"flex\" gap={theme.spacing(1)}>\r\n                  {ItemRewardDescription.map((item, index) => (\r\n                    <Typography key={index} variant=\"body1\" display=\"inline\">\r\n                      {item.name} {parse(item.amount)}\r\n                    </Typography>\r\n                  ))}\r\n                </Box>\r\n              )}\r\n              {result.skills && (\r\n                <ActivityStatsDescription\r\n                  stats={result.skills}\r\n                  activity={activity}\r\n                  requiredTime={requiredTime}\r\n                  multiplicatorFunctionName={result.skillsMulti}\r\n                />\r\n              )}\r\n            </Box>\r\n            <Box marginLeft=\"auto\" display={\"flex\"} marginRight={2}>\r\n              {result.items && <ItemImages items={result.items} />}\r\n            </Box>\r\n          </Box>\r\n          <Box>\r\n            <ProgressBar\r\n              value={\r\n                fastAction && isActive\r\n                  ? 100\r\n                  : (currentTime / requiredTime) * 100\r\n              }\r\n              label={progressBarLabel}\r\n              rightLabel\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n}\r\n\r\ntype StatsLine = {\r\n  text: string;\r\n  effect: number;\r\n};\r\n\r\ntype ItemLine = {\r\n  name: string;\r\n  amount: number;\r\n};\r\n","import { Box } from \"@mui/material\";\r\nimport React, { ComponentType } from \"react\";\r\nimport { ActivityCardProps } from \"Components\";\r\nimport { GameContext, PlayerContext } from \"GameEngine\";\r\n\r\ntype Props = { source: string; Card: ComponentType<ActivityCardProps> };\r\n\r\nexport default function ActionsPage(props: Props) {\r\n  const { source, Card } = props;\r\n  const gameData = React.useContext(GameContext);\r\n  const { state } = React.useContext(PlayerContext);\r\n\r\n  // Determine active action if any\r\n  const { action, activity } = state;\r\n  let activityName = \"\";\r\n  if (action === \"activity\" && activity) {\r\n    activityName = activity.name;\r\n  }\r\n\r\n  return (\r\n    <Box>\r\n      <Box display=\"flex\" flexWrap={\"wrap\"}>\r\n        {gameData[source].map((activity) => {\r\n          return (\r\n            // some conflict in type resolution files. Just ignore the linter warning\r\n            // @ts-ignore\r\n            <Card\r\n              activity={activity}\r\n              isActive={activityName === activity.name}\r\n              showTimesCompleted\r\n              source={source}\r\n              key={activity.name}\r\n            />\r\n          );\r\n        })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\n\r\nimport CropSquareImage from \"./CropImage\";\r\nimport { ActivityItem } from \"GameConstants/Activities/Activities\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = {\r\n  items: ActivityItem[];\r\n};\r\n\r\n// Generates item descriptions in the format Image Name Amount\r\nexport default function ItemDescriptions(props: Props) {\r\n  const { items } = props;\r\n  const parse = useNumberParser();\r\n  let result: JSX.Element[] = [];\r\n  let i = 0;\r\n  for (let item of items) {\r\n    i++;\r\n    const description = findItemDescription(item.name, item.type);\r\n    if (!description) continue;\r\n    const { path, sizeX: size, x, y } = description.image;\r\n    result.push(\r\n      <Box key={i} display=\"flex\" alignItems={\"center\"} gap={1}>\r\n        <CropSquareImage path={path} size={size} position={{ x, y }} />\r\n        <Typography display=\"inline\">\r\n          {item.name} {parse(item.amount)}\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n  return <Box>{result.map((item) => item)}</Box>;\r\n}\r\n","import { Box, Button, Typography } from \"@mui/material\";\r\nimport { ActivitiesFunctions, Activity } from \"GameConstants/Activities\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport parseTime from \"Utils/parseTime\";\r\nimport ItemDescriptions from \"Components/shared/ItemDescriptions\";\r\nimport ActivityStatsDescription from \"Components/shared/ActivityStatsDescription\";\r\n\r\ntype Props = {\r\n  item: any;\r\n  context: {\r\n    setActiveItem: React.Dispatch<React.SetStateAction<string | undefined>>;\r\n  };\r\n};\r\n\r\nexport default function TreasureTooltip(props: Props) {\r\n  const { item, context } = props;\r\n  const activity: Activity = item;\r\n  const craftTime = activity.time\r\n    ? ActivitiesFunctions[activity.time](activity)\r\n    : activity.baseTime;\r\n\r\n  const craftTimeLabel =\r\n    craftTime < 1000\r\n      ? (1000 / craftTime).toFixed(2) + \"/s\"\r\n      : parseTime(craftTime);\r\n\r\n  const { result, price } = activity;\r\n\r\n  return (\r\n    <Box sx={{ border: 1, p: 1, bgcolor: \"background.paper\" }}>\r\n      <Typography variant=\"h6\">{item.name}</Typography>\r\n      <Typography>Craft time: {craftTimeLabel}</Typography>\r\n      <Typography>{item.description}</Typography>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent={\"space-between\"}\r\n        marginY={2}\r\n        alignItems={\"center\"}\r\n      >\r\n        {price && price.items && <ItemDescriptions items={price.items} />}\r\n\r\n        <ArrowForwardIcon fontSize={\"large\"} />\r\n\r\n        <Box display={\"flex\"} marginRight={2}>\r\n          {result.items && <ItemDescriptions items={result.items} />}\r\n        </Box>\r\n      </Box>\r\n      {result.baseStats && (\r\n        <ActivityStatsDescription\r\n          stats={result.baseStats}\r\n          activity={activity}\r\n          requiredTime={craftTime}\r\n          multiplicatorFunctionName={activity.result.baseStatsMulti}\r\n        />\r\n      )}\r\n      {result.skills && (\r\n        <ActivityStatsDescription\r\n          stats={result.skills}\r\n          activity={activity}\r\n          requiredTime={craftTime}\r\n          multiplicatorFunctionName={activity.result.skillsMulti}\r\n        />\r\n      )}\r\n      <Button\r\n        variant=\"outlined\"\r\n        onClick={() => context.setActiveItem(activity.name)}\r\n      >\r\n        Select\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Box, ClickAwayListener, Popper } from \"@mui/material\";\r\ntype GridItemProps = {\r\n  width: number;\r\n  height: number;\r\n  item: any;\r\n  Cell: (props: any) => JSX.Element;\r\n  Tooltip?: (props: any) => JSX.Element;\r\n  context?: any;\r\n};\r\n\r\nexport default function GridItem(props: GridItemProps) {\r\n  const { width, height, item, Cell, Tooltip } = props;\r\n\r\n  // For the tooltip handling\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(anchorEl ? null : event.currentTarget);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popper\" : undefined;\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <Box width={width} height={height} onClick={handleClick}>\r\n        <Cell\r\n          width={width}\r\n          height={height}\r\n          item={item}\r\n          context={props.context}\r\n        />\r\n        <Popper id={id} open={open} anchorEl={anchorEl}>\r\n          {Tooltip && <Tooltip item={item} context={props.context} />}\r\n        </Popper>\r\n      </Box>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\n\r\ntype Props = {\r\n  width: number;\r\n  height: number;\r\n};\r\n\r\n// Just a placeholder white square for grids\r\nexport default function EmptyCell(props: Props) {\r\n  const { width, height } = props;\r\n  return <Box width={width} height={height} border=\"1px solid gray\" />;\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport GridItem from \"./ItemGrid/GridItem\";\r\nimport EmptyCell from \"./ItemGrid/EmptyCell\";\r\nimport { ItemType } from \"GameConstants/Interfaces\";\r\n\r\ntype Props = {\r\n  cellWidth: number;\r\n  cellHeight: number;\r\n  sizeX: number;\r\n  sizeY: number;\r\n  items: Array<any>;\r\n  // If Cell is defined, draws the same kind of cells for all items ignoring the itemTypes\r\n  Cell?: (props: any) => JSX.Element;\r\n  Tooltip?: (props: any) => JSX.Element;\r\n  itemTypes?: {\r\n    type: ItemType;\r\n    Cell: (props: any) => JSX.Element;\r\n    Tooltip: (props: any) => JSX.Element;\r\n  }[];\r\n  context?: any;\r\n};\r\n\r\nexport default function ItemGrid(props: Props) {\r\n  const {\r\n    cellWidth,\r\n    cellHeight,\r\n    sizeX,\r\n    sizeY,\r\n    items,\r\n    itemTypes,\r\n    Cell,\r\n    Tooltip,\r\n  } = props;\r\n  const tileIndex = Array(sizeX * sizeY)\r\n    .fill(0)\r\n    .map((element, index) => index);\r\n\r\n  // Resolve cell contents and tooltips based on item types\r\n  const Tiles = tileIndex.map((value) => {\r\n    const item = items[value];\r\n    if (!item) return { index: value, Cell: EmptyCell };\r\n    if (Cell) return { index: value, Cell: Cell, Tooltip: Tooltip };\r\n    if (!itemTypes) return { index: value, Cell: EmptyCell };\r\n    const view = itemTypes.find((element) => element.type === item.type);\r\n    if (!view) return { index: value, Cell: EmptyCell };\r\n    return { index: value, Cell: view.Cell, Tooltip: view.Tooltip };\r\n  });\r\n  return (\r\n    <Box\r\n      width={sizeX * cellWidth}\r\n      height={sizeY * cellHeight}\r\n      display=\"flex\"\r\n      flexWrap=\"wrap\"\r\n    >\r\n      {Tiles.map((tile) => {\r\n        return (\r\n          <GridItem\r\n            width={cellWidth}\r\n            height={cellHeight}\r\n            item={items[tile.index]}\r\n            Cell={tile.Cell}\r\n            Tooltip={tile.Tooltip}\r\n            key={tile.index}\r\n            context={props.context}\r\n          />\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport CropSquareImage from \"../shared/CropImage\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\nimport { ItemType } from \"GameConstants/Interfaces\";\r\n\r\ntype Props = {\r\n  width: number;\r\n  height: number;\r\n  item: { name: string; type: ItemType };\r\n};\r\n\r\nexport default function BasicGridCell(props: Props) {\r\n  const { width, height, item } = props;\r\n  const description = findItemDescription(item.name, item.type);\r\n  const { image } = description;\r\n\r\n  return (\r\n    <Box\r\n      width={width}\r\n      height={height}\r\n      border=\"1px solid gray\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      sx={{ justifyContent: \"space-around\", alignItems: \"center\" }}\r\n    >\r\n      <Box>\r\n        <CropSquareImage\r\n          path={image.path}\r\n          size={image.sizeX}\r\n          position={{ x: image.x, y: image.y }}\r\n        />\r\n      </Box>\r\n      <Box maxWidth={width} overflow=\"auto\" whiteSpace={\"nowrap\"}>\r\n        <Typography>{item.name}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport { Activity } from \"GameConstants/Activities/Activities\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\nimport { CropSquareImage } from \"Components\";\r\nimport { UniqueItems } from \"GameConstants/Interfaces\";\r\nimport { quality } from \"GameConstants/Activities/Crafting\";\r\nimport React from \"react\";\r\nimport power from \"GameConstants/Activities/Crafting/power\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = {\r\n  activity: Activity;\r\n};\r\n\r\n// Generates item descriptions in the format Image Name Amount\r\nexport default function ResultItemDescription(props: Props) {\r\n  const { skills } = React.useContext(PlayerContext);\r\n  const { activity } = props;\r\n  const items = activity.result.items;\r\n  if (!items) return <></>;\r\n  const parse = useNumberParser();\r\n  let result: JSX.Element[] = [];\r\n  let i = 0;\r\n  for (let item of items) {\r\n    i++;\r\n    const description = findItemDescription(item.name, item.type);\r\n    if (!description) continue;\r\n    const { path, sizeX: size, x, y } = description.image;\r\n    let itemQuality, itemPower;\r\n    if (UniqueItems.includes(item.type as any)) {\r\n      itemQuality = quality(\r\n        description.realmIndex,\r\n        skills.crafting,\r\n        activity.price?.priceMulti || 1\r\n      );\r\n      itemPower = power(itemQuality, description.realmIndex);\r\n    }\r\n    result.push(\r\n      <Box display=\"flex\" flexDirection={\"column\"} key={i}>\r\n        <Box display=\"flex\" alignItems={\"center\"} gap={1}>\r\n          <CropSquareImage path={path} size={size} position={{ x, y }} />\r\n          <Typography display=\"inline\">\r\n            {item.name} {parse(item.amount)}\r\n          </Typography>\r\n        </Box>\r\n        {UniqueItems.includes(item.type as any) ? (\r\n          <Typography>\r\n            quality: {parse(itemQuality)} power: {parse(itemPower)}\r\n          </Typography>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </Box>\r\n    );\r\n  }\r\n  return <Box>{result.map((item) => item)}</Box>;\r\n}\r\n","import { Box, Button, Paper, useTheme } from \"@mui/material\";\r\nimport { ActivityStatsDescription } from \"Components\";\r\nimport ItemDescriptions from \"Components/shared/ItemDescriptions\";\r\nimport { ActivitiesFunctions, Activity } from \"GameConstants/Activities\";\r\nimport parseTime from \"Utils/parseTime\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport ProgressBar from \"Components/shared/ProgressBar\";\r\nimport { GameContext, PlayerContext } from \"GameEngine\";\r\nimport React from \"react\";\r\nimport { defaultUpdateInterval } from \"GameConstants/Constants\";\r\nimport ResultItemDescription from \"./ResultItemDescription\";\r\n\r\ntype Props = {\r\n  activity: Activity;\r\n};\r\n\r\nexport default function ActiveItem(props: Props) {\r\n  const { activity } = props;\r\n  const player = React.useContext(PlayerContext);\r\n  const { crafting, updateContext: updateGameContext } =\r\n    React.useContext(GameContext);\r\n  const theme = useTheme();\r\n  const { price, result } = activity;\r\n  const isActive =\r\n    player.state.action === \"activity\" &&\r\n    player.state.activity?.name === activity.name;\r\n  // Determine remaining time for timed activities\r\n  const requiredTime = activity.time\r\n    ? ActivitiesFunctions[activity.time](activity, player)\r\n    : activity.baseTime;\r\n  const currentTime = activity.currentTime || 0;\r\n\r\n  // Change some displayed effects if action is really fast\r\n  const fastAction = requiredTime / defaultUpdateInterval < 5;\r\n  const progressBarLabel =\r\n    requiredTime < 1000\r\n      ? (1000 / requiredTime).toFixed(2) + \"/s\"\r\n      : parseTime(requiredTime);\r\n\r\n  const craftButtonClick = () => {\r\n    if (isActive) {\r\n      player.updateContext({ state: { action: \"idle\", activity: undefined } });\r\n      const index = crafting.findIndex((craft) => craft.name === activity.name);\r\n      if (index !== -1) {\r\n        crafting[index].currentTime = 0;\r\n        updateGameContext({ crafting: crafting.slice() });\r\n      }\r\n    } else {\r\n      player.updateContext({\r\n        state: {\r\n          action: \"activity\",\r\n          activity: { name: activity.name, source: \"crafting\" },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      elevation={8}\r\n      sx={{\r\n        paddingX: theme.spacing(2),\r\n        paddingY: theme.spacing(1),\r\n        borderRadius: theme.spacing(2),\r\n        minHeight: 60,\r\n        border: \"1px solid lightgray\",\r\n        borderColor: isActive ? theme.palette.primary.main : \"lightgray\",\r\n        padding: theme.spacing(1),\r\n        maxWidth: \"600px\",\r\n      }}\r\n    >\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection={\"column\"}\r\n        justifyContent={\"space-between\"}\r\n        minWidth={price ? 400 : 600}\r\n        minHeight={60}\r\n        height=\"100%\"\r\n      >\r\n        {\" \"}\r\n        <Box\r\n          display=\"flex\"\r\n          justifyContent={\"space-between\"}\r\n          marginY={2}\r\n          alignItems={\"center\"}\r\n        >\r\n          {price && price.items && <ItemDescriptions items={price.items} />}\r\n\r\n          <ArrowForwardIcon fontSize={\"large\"} />\r\n\r\n          <Box display={\"flex\"} marginRight={2}>\r\n            {result.items && <ResultItemDescription activity={activity} />}\r\n          </Box>\r\n        </Box>\r\n        {result.baseStats && (\r\n          <ActivityStatsDescription\r\n            stats={result.baseStats}\r\n            activity={activity}\r\n            requiredTime={requiredTime}\r\n            multiplicatorFunctionName={activity.result.baseStatsMulti}\r\n          />\r\n        )}\r\n        {result.skills && (\r\n          <ActivityStatsDescription\r\n            stats={result.skills}\r\n            activity={activity}\r\n            requiredTime={requiredTime}\r\n            multiplicatorFunctionName={activity.result.skillsMulti}\r\n          />\r\n        )}\r\n        <Box>\r\n          <ProgressBar\r\n            value={\r\n              fastAction && isActive ? 100 : (currentTime / requiredTime) * 100\r\n            }\r\n            label={progressBarLabel}\r\n            rightLabel\r\n          />\r\n        </Box>\r\n        <Button variant=\"outlined\" onClick={craftButtonClick}>\r\n          {isActive ? \"stop\" : \"craft\"}\r\n        </Button>\r\n      </Box>\r\n    </Paper>\r\n  );\r\n}\r\n","import { Box, Input, Paper, Typography } from \"@mui/material\";\r\nimport { Activity } from \"GameConstants/Activities\";\r\nimport { GameContext } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\ntype Props = {\r\n  activity: Activity;\r\n};\r\n\r\nexport default function PriceMultiplier(props: Props) {\r\n  const { activity } = props;\r\n  const { crafting, updateContext } = React.useContext(GameContext);\r\n  const multi = activity.price?.priceMulti || 1;\r\n\r\n  const handleChange = (event) => {\r\n    try {\r\n      const newMulti = parseInt(event.target.value);\r\n      if (isNaN(newMulti)) throw new Error(`Price multiplier is not a number`);\r\n      const index = crafting.findIndex((craft) => craft.name === activity.name);\r\n      if (index === -1) return;\r\n      if (crafting[index].price)\r\n        (crafting[index].price as any).priceMulti = newMulti;\r\n      updateContext({ crafting: crafting.slice() });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  return (\r\n    <Paper\r\n      elevation={8}\r\n      sx={{\r\n        borderRadius: 2,\r\n        minHeight: 60,\r\n        border: \"1px solid lightgray\",\r\n        borderColor: \"lightgray\",\r\n        padding: 1,\r\n        minWidth: 60,\r\n      }}\r\n    >\r\n      <Box display=\"flex\" flexDirection={\"column\"} minHeight={60} height=\"100%\">\r\n        <Typography>Price Multi</Typography>\r\n        <Input defaultValue={multi} onChange={handleChange} />\r\n      </Box>\r\n    </Paper>\r\n  );\r\n}\r\n","import { BasicGridCell } from \"Components\";\r\nimport { Activity } from \"GameConstants/Activities\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\n\r\ntype Props = {\r\n  width: number;\r\n  height: number;\r\n  item: Activity;\r\n};\r\n\r\nexport default function TreasureCell(props: Props) {\r\n  const { width, height, item } = props;\r\n  const reward = item.result.items!;\r\n  const { name, type } = reward[0];\r\n\r\n  return <BasicGridCell width={width} height={height} item={{ name, type }} />;\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Crafting } from \"GameConstants/Activities\";\r\nimport TreasureTooltip from \"./CraftingPage/TreasureTooltip\";\r\nimport { ItemGrid } from \"Components\";\r\nimport { GameContext } from \"GameEngine\";\r\nimport ActiveItem from \"./CraftingPage/ActiveItem\";\r\nimport PriceMultiplier from \"./CraftingPage/PriceMultiplier\";\r\nimport TreasureCell from \"./CraftingPage/TreasureCell\";\r\n\r\nexport default function CraftingPage() {\r\n  const { crafting } = React.useContext(GameContext);\r\n  const [activeItem, setActiveItem] = React.useState<string | undefined>();\r\n\r\n  return (\r\n    <Box marginLeft={2} marginTop={2}>\r\n      {activeItem && (\r\n        <Box display=\"flex\" gap={2} marginBottom={2}>\r\n          <PriceMultiplier\r\n            activity={\r\n              crafting.find((activity) => activity.name === activeItem)!\r\n            }\r\n          />\r\n          <ActiveItem\r\n            activity={\r\n              crafting.find((activity) => activity.name === activeItem)!\r\n            }\r\n          />\r\n        </Box>\r\n      )}\r\n      <ItemGrid\r\n        cellWidth={160}\r\n        cellHeight={64}\r\n        sizeX={5}\r\n        sizeY={5}\r\n        items={crafting}\r\n        Cell={TreasureCell}\r\n        Tooltip={TreasureTooltip}\r\n        context={{ setActiveItem }}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n","import { Button, TableCell, TableRow } from \"@mui/material\";\r\nimport { EnemyType } from \"GameConstants/Fighting/Enemies\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport React from \"react\";\r\nimport EnemyTooltip from \"./EnemyTooltip\";\r\nimport { useNumberParser, withTooltip } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\ntype Props = {\r\n  item: any;\r\n};\r\nconst EnemyRow = withTooltip<Props>((props) => {\r\n  const enemy = props.item as EnemyType;\r\n  const { name, health, attack, defence, healthRegen } = enemy;\r\n  const parse = useNumberParser();\r\n  const { state, updateContext } = React.useContext(PlayerContext);\r\n  const isActive =\r\n    state.action === \"fighting\" && state.enemy\r\n      ? state.enemy.name === name\r\n      : false;\r\n  const handleClick = () => {\r\n    if (isActive) {\r\n      updateContext({ state: { action: \"idle\", enemy: undefined } });\r\n      return;\r\n    }\r\n    const currentEnemy = JSON.parse(JSON.stringify(enemy));\r\n    currentEnemy.currentHealth = currentEnemy.health;\r\n    updateContext({\r\n      state: { action: \"fighting\", enemy: currentEnemy },\r\n    });\r\n  };\r\n  const enemyHealthLabel =\r\n    isActive && state.enemy\r\n      ? `${parse(state.enemy.health)}/${parse(state.enemy.currentHealth)}`\r\n      : parse(health);\r\n  return (\r\n    <TableRow>\r\n      <TableCell\r\n        onClick={props.toggleTooltip}\r\n        onMouseOver={props.showTooltip}\r\n        onMouseOut={props.hideTooltip}\r\n      >\r\n        {name}\r\n      </TableCell>\r\n      <TableCell onClick={props.toggleTooltip}>{enemyHealthLabel}</TableCell>\r\n      <TableCell onClick={props.toggleTooltip}>{parse(attack)}</TableCell>\r\n      <TableCell onClick={props.toggleTooltip}>{parse(defence)}</TableCell>\r\n      <TableCell onClick={props.toggleTooltip}>{parse(healthRegen)}</TableCell>\r\n      <TableCell>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={handleClick}\r\n          color={isActive ? \"warning\" : \"primary\"}\r\n        >\r\n          {isActive ? \"Flee\" : \"Fight\"}\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}, EnemyTooltip);\r\n\r\nexport default EnemyRow;\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Typography } from \"@mui/material\";\r\nimport ItemDescriptions from \"Components/shared/ItemDescriptions\";\r\nimport { EnemyType } from \"GameConstants/Fighting/Enemies\";\r\nimport { getStatName } from \"GameEngine\";\r\n\r\nexport default function EnemyTooltip(props: { item: EnemyType }) {\r\n  const enemy = props.item;\r\n  const { health, healthRegen, defence, attack } = enemy;\r\n  const parse = useNumberParser();\r\n  let description: Array<JSX.Element> = [];\r\n  for (const [key, value] of Object.entries({\r\n    health,\r\n    attack,\r\n    healthRegen,\r\n    defence,\r\n  })) {\r\n    description.push(\r\n      <Typography key={key}>\r\n        {getStatName(key)}: {parse(value)}\r\n      </Typography>\r\n    );\r\n  }\r\n  return (\r\n    <Box bgcolor={\"background.paper\"} border={1} padding={2}>\r\n      <Typography variant=\"h6\">{enemy.name}</Typography>\r\n      <Typography marginY={1}>{enemy.description}</Typography>\r\n      {description}\r\n\r\n      {enemy.result.items && (\r\n        <>\r\n          <Typography variant=\"h6\" marginTop={2}>\r\n            Reward\r\n          </Typography>\r\n          <ItemDescriptions items={enemy.result.items} />\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { GameContext } from \"GameEngine\";\r\nimport React from \"react\";\r\nimport EnemyRow from \"./FightingPage/EnemyRow\";\r\n\r\nexport default function FightingPage() {\r\n  const { enemies } = React.useContext(GameContext);\r\n  return (\r\n    <Box marginTop={2} marginLeft={2}>\r\n      <TableContainer sx={{ width: 600, height: 600, overflow: \"auto\" }}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>name</TableCell>\r\n              <TableCell>health</TableCell>\r\n              <TableCell>attack</TableCell>\r\n              <TableCell>defence</TableCell>\r\n              <TableCell>healthRegen</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {enemies.map((enemy) => (\r\n              <EnemyRow item={enemy} key={enemy.name} />\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n}\r\n","import {\r\n  Box,\r\n  LinearProgress,\r\n  LinearProgressProps,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\nimport { levelExp, totalExp } from \"GameConstants/Items/CultivationManuals\";\r\nimport { PlayerContext, getStatName } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\nexport default function ActiveManual() {\r\n  const { state } = React.useContext(PlayerContext);\r\n  const theme = useTheme();\r\n  if (state.action !== \"cultivating\" || !state.manual)\r\n    return (\r\n      <Box\r\n        width=\"60%\"\r\n        border=\"1px solid gray\"\r\n        height={theme.spacing(10)}\r\n        borderRadius={theme.spacing(1)}\r\n      >\r\n        <Typography\r\n          variant=\"h5\"\r\n          marginTop={theme.spacing(2)}\r\n          marginLeft={theme.spacing(2)}\r\n        >\r\n          No manual selected\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  const { manual, learningProgress } = state.manual;\r\n  const { rarity, realm, maxLevel } = manual;\r\n\r\n  const { exp, level } = learningProgress;\r\n  const expForPrevLevel = totalExp(level);\r\n  const expForNextLevel = levelExp(level + 1, rarity, realm);\r\n\r\n  const ManualStatsDescription: ManualStatsDescription[] = [];\r\n  if (manual.stats)\r\n    for (const [key, value] of Object.entries(manual.stats)) {\r\n      ManualStatsDescription.push({\r\n        text: getStatName(key),\r\n        effect: value * learningProgress.level,\r\n      });\r\n    }\r\n  const ManualSkillsDescription: ManualStatsDescription[] = [];\r\n  if (manual.skills)\r\n    for (const [key, value] of Object.entries(manual.skills)) {\r\n      ManualSkillsDescription.push({\r\n        text: getStatName(key),\r\n        effect: value * learningProgress.level,\r\n      });\r\n    }\r\n  return (\r\n    <Box width=\"60%\" border=\"1px solid gray\" borderRadius={theme.spacing(1)}>\r\n      <Box\r\n        display={\"flex\"}\r\n        marginTop={theme.spacing(2)}\r\n        marginLeft={theme.spacing(2)}\r\n        alignItems=\"center\"\r\n      >\r\n        <Box\r\n          width={100}\r\n          minHeight={60}\r\n          marginY={theme.spacing(1)}\r\n          display=\"flex\"\r\n          justifyContent={\"center\"}\r\n        >\r\n          <img\r\n            src={manual.image.path || \"/manuals/placeholder.png\"}\r\n            width=\"60px\"\r\n            height=\"auto\"\r\n            alt=\"\"\r\n          ></img>\r\n        </Box>\r\n        <Typography variant=\"h5\">{manual.name}</Typography>\r\n        <Typography marginLeft={theme.spacing(2)}>\r\n          Level: {level} / {maxLevel}\r\n        </Typography>\r\n\r\n        <Box width={400} marginLeft={theme.spacing(4)}>\r\n          <ProgressBar\r\n            value={((exp - expForPrevLevel) / expForNextLevel) * 100}\r\n            label={\r\n              level !== maxLevel\r\n                ? `Exp: ${(exp - expForPrevLevel).toFixed(\r\n                    2\r\n                  )}/${expForNextLevel}`\r\n                : \"\"\r\n            }\r\n          />\r\n        </Box>\r\n      </Box>\r\n      <Box\r\n        marginLeft={theme.spacing(2)}\r\n        marginBottom={theme.spacing(2)}\r\n        display=\"flex\"\r\n      >\r\n        <Typography>\r\n          {manual.realm} ({manual.rarity})\r\n        </Typography>\r\n        {ManualStatsDescription.map((stat) => {\r\n          return (\r\n            <Typography key={stat.text} marginLeft={theme.spacing(2)}>\r\n              {stat.text}: +{(stat.effect * 100).toFixed(2)}%\r\n            </Typography>\r\n          );\r\n        })}\r\n        {ManualSkillsDescription.map((skill) => {\r\n          return (\r\n            <Typography key={skill.text} marginLeft={theme.spacing(2)}>\r\n              {skill.text}: +{(skill.effect * 100).toFixed(2)}%\r\n            </Typography>\r\n          );\r\n        })}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction ProgressBar(\r\n  props: LinearProgressProps & { label: string; value: number }\r\n) {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Typography variant=\"body1\" color=\"text.primary\">\r\n        {props.label}\r\n      </Typography>\r\n      <Box sx={{ width: \"60%\", m: 1 }}>\r\n        <LinearProgress variant=\"determinate\" color=\"primary\" {...props} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype ManualStatsDescription = {\r\n  text: string;\r\n  effect: number;\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  ClickAwayListener,\r\n  Popper,\r\n  Typography,\r\n  useTheme,\r\n} from \"@mui/material\";\r\n\r\nimport React from \"react\";\r\nimport { PlayerCultivationManual } from \"GameConstants/Interfaces\";\r\nimport { PlayerContext, playerStats } from \"GameEngine\";\r\n\r\nexport default function EquippedManualCard(props: PlayerCultivationManual) {\r\n  const { manual, learningProgress } = props;\r\n  let player = React.useContext(PlayerContext);\r\n  let { manuals, state, updateContext, stats } = player;\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const theme = useTheme();\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\r\n    setAnchorEl(anchorEl ? null : event.currentTarget);\r\n  };\r\n\r\n  const handleClickAway = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const selectButtonClick = () => {\r\n    if (!manuals) return;\r\n    const index = manuals.findIndex((item) => item.manual.name === manual.name);\r\n    if (index === -1) return;\r\n    updateContext({ state: { action: \"cultivating\", manual: manuals[index] } });\r\n  };\r\n\r\n  const unequipButtonClick = () => {\r\n    if (!manuals) return;\r\n    const index = manuals.findIndex((item) => item.manual.name === manual.name);\r\n    if (index === -1) return;\r\n    manuals[index].isEquipped = !manuals[index].isEquipped;\r\n    if (state.manual && state.manual.manual.name === manual.name)\r\n      state = { action: \"idle\" };\r\n    stats = playerStats(player);\r\n    updateContext({ manuals, state, stats });\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popper\" : undefined;\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClickAway}>\r\n      <Box\r\n        border=\"1px solid gray\"\r\n        width={120}\r\n        height={200}\r\n        borderRadius={theme.spacing(1)}\r\n        onClick={handleClick}\r\n      >\r\n        <Box\r\n          width={100}\r\n          minHeight={60}\r\n          marginY={theme.spacing(1)}\r\n          display=\"flex\"\r\n          justifyContent={\"center\"}\r\n        >\r\n          <img\r\n            src={manual.image.path || \"/manuals/placeholder.png\"}\r\n            width=\"60px\"\r\n            height=\"auto\"\r\n            alt=\"\"\r\n          ></img>\r\n        </Box>\r\n        <Box>\r\n          <Typography variant=\"body2\" marginLeft={theme.spacing(1)}>\r\n            {manual.name}\r\n          </Typography>\r\n          <Typography variant=\"body2\" marginLeft={theme.spacing(1)}>\r\n            {learningProgress.level}/{manual.maxLevel}\r\n          </Typography>\r\n          <Typography variant=\"body2\" marginLeft={theme.spacing(1)}>\r\n            {manual.realm}\r\n          </Typography>\r\n        </Box>\r\n        <Popper id={id} open={open} anchorEl={anchorEl}>\r\n          <Box sx={{ border: 1, p: 1, bgcolor: \"background.paper\" }}>\r\n            <Button onClick={selectButtonClick} color=\"success\">\r\n              Study\r\n            </Button>\r\n            <Button onClick={unequipButtonClick} color=\"warning\">\r\n              Unequip\r\n            </Button>\r\n          </Box>\r\n        </Popper>\r\n      </Box>\r\n    </ClickAwayListener>\r\n  );\r\n}\r\n","import { Box, useTheme } from \"@mui/material\";\r\n\r\nexport default function PlaceholderCard() {\r\n  const theme = useTheme();\r\n  return (\r\n    <Box\r\n      border=\"1px solid gray\"\r\n      width={120}\r\n      height={200}\r\n      borderRadius={theme.spacing(1)}\r\n    ></Box>\r\n  );\r\n}\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { getWindowDimensions } from \"Utils/useWindowDimensions\";\r\nimport EquippedManualCard from \"./EquippedManuals/EquippedManualCard\";\r\nimport PlaceholderCard from \"./EquippedManuals/PlaceholderCard\";\r\nimport { PlayerContext } from \"GameEngine\";\r\n\r\nexport default function EquippedManuals() {\r\n  const { manuals } = React.useContext(PlayerContext);\r\n  const { width } = getWindowDimensions();\r\n  const theme = useTheme();\r\n  const equippedManuals = manuals?.filter((manual) => manual.isEquipped);\r\n  const tileIndex = Array(10)\r\n    .fill(0)\r\n    .map((element, index) => index);\r\n  return (\r\n    <>\r\n      <Typography\r\n        variant=\"h5\"\r\n        marginTop={theme.spacing(2)}\r\n        marginBottom={theme.spacing(2)}\r\n      >\r\n        Equipped Manuals\r\n      </Typography>\r\n      <Box display=\"flex\" flexWrap={\"wrap\"} maxWidth={width - 512}>\r\n        {tileIndex.map((index) => {\r\n          if (equippedManuals && equippedManuals[index])\r\n            return (\r\n              <EquippedManualCard {...equippedManuals[index]} key={index} />\r\n            );\r\n          return <PlaceholderCard key={index} />;\r\n        })}\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n","import { Box, Button, Typography, useTheme } from \"@mui/material\";\r\nimport { CultivationRealms } from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport { PlayerContext, playerStats, getStatName } from \"GameEngine\";\r\n\r\nimport React from \"react\";\r\n\r\nexport default function ManualsList() {\r\n  const player = React.useContext(PlayerContext);\r\n  let { manuals, updateContext, stats } = player;\r\n  const theme = useTheme();\r\n  if (!manuals) return <Box />;\r\n  let storedManuals = manuals.filter((item) => !item.isEquipped);\r\n\r\n  // Sort manuals by realm\r\n  storedManuals.sort((a, b) => {\r\n    const aIndex = CultivationRealms.findIndex(\r\n      (item) => item.name === a.manual.realm\r\n    );\r\n    const bIndex = CultivationRealms.findIndex(\r\n      (item) => item.name === b.manual.realm\r\n    );\r\n    return bIndex - aIndex;\r\n  });\r\n  const canSelect = manuals.filter((item) => item.isEquipped).length < 10;\r\n\r\n  const equipButtonClick = (name: string) => {\r\n    if (!canSelect || !manuals) return;\r\n    const index = manuals.findIndex((item) => item.manual.name === name);\r\n    if (index === -1) return;\r\n    manuals[index].isEquipped = !manuals[index].isEquipped;\r\n    stats = playerStats(player);\r\n    updateContext({ manuals, stats });\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h5\" marginY={theme.spacing(2)}>\r\n        Known manuals\r\n      </Typography>\r\n      {storedManuals.map((item) => {\r\n        const { manual, learningProgress } = item;\r\n        const ManualStatsDescription: ManualStatsDescription[] = [];\r\n        if (manual.stats)\r\n          for (const [key, value] of Object.entries(manual.stats)) {\r\n            ManualStatsDescription.push({\r\n              text: getStatName(key),\r\n              effect: value * learningProgress.level,\r\n            });\r\n          }\r\n        const ManualSkillsDescription: ManualStatsDescription[] = [];\r\n        if (manual.skills)\r\n          for (const [key, value] of Object.entries(manual.skills)) {\r\n            ManualSkillsDescription.push({\r\n              text: getStatName(key),\r\n              effect: value * learningProgress.level,\r\n            });\r\n          }\r\n        return (\r\n          <Box\r\n            key={manual.name}\r\n            display=\"flex\"\r\n            alignItems={\"center\"}\r\n            width={500}\r\n          >\r\n            <Box>\r\n              <Typography>\r\n                {manual.name} {manual.realm} ({manual.rarity})\r\n              </Typography>\r\n              <Typography>\r\n                Level: {learningProgress.level} / {manual.maxLevel}\r\n              </Typography>\r\n              {ManualStatsDescription.map((stat) => {\r\n                return (\r\n                  <Typography key={stat.text}>\r\n                    {stat.text}: {(stat.effect * 100).toFixed(2)}%\r\n                  </Typography>\r\n                );\r\n              })}\r\n              {ManualSkillsDescription.map((skill) => {\r\n                return (\r\n                  <Typography key={skill.text}>\r\n                    {skill.text}: {(skill.effect * 100).toFixed(2)}%\r\n                  </Typography>\r\n                );\r\n              })}\r\n            </Box>\r\n            <Button\r\n              variant=\"outlined\"\r\n              onClick={() => equipButtonClick(manual.name)}\r\n              sx={{\r\n                maxHeight: theme.spacing(4),\r\n                minHeight: theme.spacing(4),\r\n                margin: \"auto\",\r\n              }}\r\n              disabled={!canSelect}\r\n            >\r\n              Select\r\n            </Button>\r\n          </Box>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n\r\ntype ManualStatsDescription = {\r\n  text: string;\r\n  effect: number;\r\n};\r\n","import { Box, Typography, useTheme } from \"@mui/material\";\r\nimport getSpacing from \"Utils/getSpacing\";\r\nimport { getWindowDimensions } from \"Utils/useWindowDimensions\";\r\nimport ActiveManual from \"./CultivationPage/ActiveManual\";\r\nimport EquippedManuals from \"./CultivationPage/EquippedManuals\";\r\nimport ManualsList from \"./CultivationPage/ManualsList\";\r\n\r\nexport default function ManualsPage() {\r\n  const theme = useTheme();\r\n  const { height } = getWindowDimensions();\r\n  return (\r\n    <Box\r\n      marginLeft={theme.spacing(2)}\r\n      marginTop={theme.spacing(2)}\r\n      height={height - getSpacing(theme, 20)}\r\n      overflow=\"auto\"\r\n    >\r\n      <Typography variant=\"h5\" marginBottom={theme.spacing(2)}>\r\n        Studying Manual\r\n      </Typography>\r\n      <ActiveManual />\r\n      <EquippedManuals />\r\n      <ManualsList />\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\n\r\ntype Props = {\r\n  progress: number;\r\n  isHeavenly: boolean;\r\n};\r\n\r\nexport default function BreakthroughAnimation(props: Props) {\r\n  const { progress, isHeavenly } = props;\r\n  const bar = 400 * progress || 0;\r\n  return (\r\n    <Box position={\"relative\"}>\r\n      <Box\r\n        bgcolor={\"black\"}\r\n        height={400}\r\n        maxHeight={400}\r\n        overflow=\"hidden\"\r\n        width={100}\r\n        position=\"absolute\"\r\n        top={0}\r\n        left={0}\r\n        zIndex={2}\r\n        sx={{ opacity: 0.3 }}\r\n        border=\"3px solid gray\"\r\n        borderRadius={4}\r\n      />\r\n      <Box\r\n        height={400}\r\n        maxHeight={400}\r\n        overflow=\"hidden\"\r\n        width={100}\r\n        display=\"flex\"\r\n        flexDirection={\"column\"}\r\n        position=\"absolute\"\r\n        top={0}\r\n        left={0}\r\n        borderRadius={4}\r\n      >\r\n        <Box\r\n          height={400 - bar}\r\n          minHeight={400 - bar}\r\n          maxHeight={400 - bar}\r\n          bgcolor=\"lightgrey\"\r\n          sx={{ opacity: 0.3 }}\r\n        />\r\n        <Box\r\n          height={bar}\r\n          minHeight={bar}\r\n          maxHeight={bar}\r\n          bgcolor={isHeavenly ? \"rgb(51,157,255)\" : \"rgb(0, 153, 0)\"}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Typography, useTheme } from \"@mui/material\";\r\nimport { HtmlTooltip } from \"Components\";\r\nimport { PlayerBaseStats } from \"GameConstants/Player\";\r\nimport getSpacing from \"Utils/getSpacing\";\r\nimport { getWindowDimensions } from \"Utils/useWindowDimensions\";\r\n\r\ntype Props = {\r\n  PassedTribulations: Array<{\r\n    name: string;\r\n    stepReached: number;\r\n    statMulti: number;\r\n    tribulationMulti: number;\r\n  }>;\r\n  currentPower: PlayerBaseStats;\r\n};\r\n\r\nexport default function Placeholder(props: Props) {\r\n  const { PassedTribulations, currentPower } = props;\r\n  const parse = useNumberParser();\r\n  const theme = useTheme();\r\n  const { height } = getWindowDimensions();\r\n  return (\r\n    <Box paddingLeft={theme.spacing(2)} paddingTop={theme.spacing(2)}>\r\n      <Box\r\n        height={height - getSpacing(theme, 16)}\r\n        display=\"flex\"\r\n        flexDirection={\"column\"}\r\n        alignItems={\"center\"}\r\n        maxWidth={600}\r\n      >\r\n        <Typography variant=\"h4\" marginBottom={theme.spacing(2)}>\r\n          You have reached the pinnacle of cultivation\r\n        </Typography>\r\n        <Typography variant=\"h6\">Passed tribulations</Typography>\r\n        {PassedTribulations.map((item) => {\r\n          return (\r\n            <HtmlTooltip\r\n              key={item.name}\r\n              title={\r\n                <>\r\n                  <Typography>Multipliers:</Typography>\r\n                  <Typography>Player stats: {parse(item.statMulti)}</Typography>\r\n                  <Typography>\r\n                    Tribulation power: {parse(item.tribulationMulti)}\r\n                  </Typography>\r\n                </>\r\n              }\r\n            >\r\n              <Box>\r\n                <Typography>\r\n                  {item.name}: {item.stepReached}\r\n                </Typography>\r\n              </Box>\r\n            </HtmlTooltip>\r\n          );\r\n        })}\r\n        <Box\r\n          border=\"1px solid gray\"\r\n          borderRadius={4}\r\n          display=\"flex\"\r\n          alignItems={\"center\"}\r\n          padding={theme.spacing(2)}\r\n          gap={theme.spacing(4)}\r\n        >\r\n          <Box>\r\n            <Typography>Health x {parse(currentPower.health)}</Typography>\r\n            <Typography>\r\n              Health regen x {parse(currentPower.healthRegen)}\r\n            </Typography>\r\n            <Typography>Attack x {parse(currentPower.attack)}</Typography>\r\n            <Typography>Defence x {parse(currentPower.defence)}</Typography>\r\n            <Typography>Insight x {parse(currentPower.insight)}</Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { CultivationRealm } from \"GameConstants/Cultivation/CultivationRealms\";\r\n\r\nimport calculateTribulationPower from \"GameEngine/shared/calculateTribulationPower\";\r\nimport {\r\n  BreakthroughDps,\r\n  TribulationDps,\r\n} from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport { PlayerContextType } from \"GameConstants/Interfaces\";\r\n\r\nexport default function calculateMaxTribulationStage(props: {\r\n  player: PlayerContextType;\r\n  cultivationRealms: CultivationRealm[];\r\n  nextRealmIndex: number;\r\n}): number {\r\n  const { player, cultivationRealms, nextRealmIndex } = props;\r\n  const { stats, currentStats } = player;\r\n  let step = 0;\r\n  let remainingHealth = currentStats.health;\r\n  const cultivationRealmsCopy: CultivationRealm[] = JSON.parse(\r\n    JSON.stringify(cultivationRealms)\r\n  );\r\n\r\n  const currentRealm = cultivationRealmsCopy[nextRealmIndex];\r\n  if (!currentRealm.tribulation) return 0;\r\n  for (let i = 0; i <= currentRealm.tribulation.steps; i++) {\r\n    const tribulation = calculateTribulationPower(\r\n      nextRealmIndex,\r\n      cultivationRealmsCopy\r\n    );\r\n    const tribulationDps = TribulationDps(tribulation, player);\r\n    const playerDps = BreakthroughDps(player, tribulation);\r\n    if (playerDps <= 0) break;\r\n    if (tribulationDps <= 0) {\r\n      step++;\r\n      (cultivationRealmsCopy[nextRealmIndex] as any).tribulation.stepReached =\r\n        step;\r\n      continue;\r\n    }\r\n    const time = tribulation.health / playerDps;\r\n    const damageReceived = tribulationDps * time;\r\n    remainingHealth -= damageReceived;\r\n    if (remainingHealth <= 0) break;\r\n\r\n    step++;\r\n    (cultivationRealmsCopy[nextRealmIndex] as any).tribulation.stepReached =\r\n      step;\r\n  }\r\n  return Math.min(Math.max(step - 1, 0), currentRealm.tribulation.steps);\r\n}\r\n","import { Box, Button, Typography, useTheme } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport calculateTribulationPower from \"GameEngine/shared/calculateTribulationPower\";\r\nimport BreakthroughAnimation from \"./RealmBreakthroughPage/BreakthroughAnimation\";\r\nimport { getWindowDimensions } from \"Utils/useWindowDimensions\";\r\nimport getSpacing from \"Utils/getSpacing\";\r\nimport calculateRealmPower from \"GameEngine/shared/calculateRealmPower\";\r\nimport ArrowForwardIcon from \"@mui/icons-material/ArrowForward\";\r\nimport Placeholder from \"./RealmBreakthroughPage/Placeholder\";\r\nimport calculateMaxTribulationStage from \"./RealmBreakthroughPage/calculateMaxTribulationStage\";\r\nimport { HtmlTooltip } from \"Components\";\r\nimport { PlayerContext, GameContext } from \"GameEngine\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// ! Some bad coding ahead. Probably should split into several files :)\r\nexport default function RealmBreakthroughPage() {\r\n  const theme = useTheme();\r\n  const player = React.useContext(PlayerContext);\r\n  const { realm } = player;\r\n  const { cultivationRealms, updateContext: updateGameContext } =\r\n    React.useContext(GameContext);\r\n\r\n  const nextRealmIndex =\r\n    cultivationRealms.length >= realm.index + 2 ? realm.index + 1 : undefined;\r\n  const { height } = getWindowDimensions();\r\n\r\n  // Passed tribulation statistics\r\n  let PassedTribulations: Array<{\r\n    name: string;\r\n    stepReached: number;\r\n    statMulti: number;\r\n    tribulationMulti: number;\r\n  }> = [];\r\n\r\n  for (let i = 0; i <= realm.index; i++) {\r\n    const r = cultivationRealms[i];\r\n    if (!r.tribulation) continue;\r\n\r\n    PassedTribulations.push({\r\n      name: r.name,\r\n      stepReached: r.tribulation.stepReached || 0,\r\n      statMulti: r.tribulation.stepReached\r\n        ? r.tribulation.statsMulti ** r.tribulation.stepReached\r\n        : 1,\r\n      tribulationMulti: r.tribulation.stepReached\r\n        ? r.tribulation.multiplier ** r.tribulation.stepReached\r\n        : 1,\r\n    });\r\n  }\r\n\r\n  const TotalTribulations = {\r\n    statMulti: 1,\r\n    tribulationMulti: 1,\r\n  };\r\n  for (let i = 0; i < PassedTribulations.length; i++) {\r\n    const trib = PassedTribulations[i];\r\n    TotalTribulations.statMulti *= trib.statMulti || 1;\r\n    TotalTribulations.tribulationMulti *= trib.tribulationMulti || 1;\r\n  }\r\n\r\n  const currentPower = calculateRealmPower(realm.index, cultivationRealms);\r\n\r\n  if (!nextRealmIndex)\r\n    return (\r\n      <Placeholder\r\n        currentPower={currentPower}\r\n        PassedTribulations={PassedTribulations}\r\n      ></Placeholder>\r\n    );\r\n\r\n  // Tribulation logic\r\n  const nextRealm = cultivationRealms[nextRealmIndex];\r\n  const power = calculateTribulationPower(nextRealmIndex, cultivationRealms);\r\n  const parse = useNumberParser();\r\n  const { healthRegen, attack, defence, health } = power;\r\n\r\n  const { state, updateContext } = React.useContext(PlayerContext);\r\n  const isActive = state.action === \"breakthrough\";\r\n  const currentHealth = nextRealm.currentStats?.currentHealth || health;\r\n  const handleClick = () => {\r\n    if (isActive) {\r\n      state.action = \"idle\";\r\n      state.realm = undefined;\r\n      // Reset last tribulation state\r\n      cultivationRealms[nextRealmIndex].currentStats = undefined;\r\n      if (cultivationRealms[nextRealmIndex].tribulation)\r\n        (cultivationRealms[nextRealmIndex] as any).tribulation.stepReached =\r\n          undefined;\r\n    } else {\r\n      state.action = \"breakthrough\";\r\n      state.realm = { index: nextRealmIndex };\r\n      const { health, healthRegen, attack, defence } = nextRealm.baseStats;\r\n      cultivationRealms[nextRealmIndex].currentStats = {\r\n        health,\r\n        currentHealth: health,\r\n        healthRegen,\r\n        attack,\r\n        defence,\r\n      };\r\n      if (cultivationRealms[nextRealmIndex].tribulation)\r\n        (cultivationRealms[nextRealmIndex] as any).tribulation.stepReached = 0;\r\n    }\r\n    updateContext({ state });\r\n    updateGameContext({ cultivationRealms: cultivationRealms.slice() });\r\n  };\r\n\r\n  // Cultivation realm power to display\r\n\r\n  const nextPower = calculateRealmPower(nextRealmIndex, cultivationRealms);\r\n\r\n  return (\r\n    <Box paddingLeft={theme.spacing(2)} paddingTop={theme.spacing(2)}>\r\n      <Box\r\n        height={height - getSpacing(theme, 16)}\r\n        display=\"flex\"\r\n        flexDirection={\"column\"}\r\n        alignItems={\"center\"}\r\n        maxWidth={600}\r\n      >\r\n        <Typography variant=\"h4\" marginBottom={theme.spacing(2)}>\r\n          Next realm: {nextRealm.name}\r\n        </Typography>\r\n        {nextRealm.tribulation && (\r\n          <HtmlTooltip\r\n            title={\r\n              <>\r\n                <Typography>\r\n                  Each completed stage provides\r\n                  <Typography\r\n                    component=\"span\"\r\n                    color={theme.palette.success.main}\r\n                    display=\"inline\"\r\n                  >\r\n                    {\" \"}\r\n                    x{nextRealm.tribulation.statsMulti}{\" \"}\r\n                  </Typography>\r\n                  multiplier to all stats aIndex\r\n                  <Typography\r\n                    component=\"span\"\r\n                    color={theme.palette.error.main}\r\n                    display=\"inline\"\r\n                  >\r\n                    {\" \"}\r\n                    x{nextRealm.tribulation.multiplier}{\" \"}\r\n                  </Typography>\r\n                  to all following heavenly tribulations\r\n                </Typography>\r\n              </>\r\n            }\r\n          >\r\n            <Typography variant=\"h6\" marginBottom={theme.spacing(2)}>\r\n              Tribulation stages: {nextRealm.tribulation.steps}\r\n            </Typography>\r\n          </HtmlTooltip>\r\n        )}\r\n        <Box>\r\n          <Box display=\"flex\" alignItems={\"center\"}>\r\n            <Box marginRight={theme.spacing(4)}>\r\n              <Typography variant=\"h6\">Passed tribulations</Typography>\r\n              {PassedTribulations.map((item) => {\r\n                return (\r\n                  <HtmlTooltip\r\n                    key={item.name}\r\n                    title={\r\n                      <>\r\n                        <Typography>Multipliers:</Typography>\r\n                        <Typography>\r\n                          Player stats: {parse(item.statMulti)}\r\n                        </Typography>\r\n                        <Typography>\r\n                          Tribulation power: {parse(item.tribulationMulti)}\r\n                        </Typography>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <Box>\r\n                      <Typography>\r\n                        {item.name}: {item.stepReached}\r\n                      </Typography>\r\n                    </Box>\r\n                  </HtmlTooltip>\r\n                );\r\n              })}\r\n            </Box>\r\n            <Box width={100} height={400}>\r\n              <BreakthroughAnimation\r\n                progress={health ? (health - currentHealth) / health : 0}\r\n                isHeavenly={nextRealm.tribulation?.stepReached ? true : false}\r\n              />\r\n            </Box>\r\n\r\n            <Box marginLeft={theme.spacing(4)}>\r\n              <Typography variant=\"h6\">Tribulation power:</Typography>\r\n              <Typography>Hp: {parse(currentHealth)}</Typography>\r\n              <Typography>Hp.regen: {parse(healthRegen)}</Typography>\r\n              <Typography>Atk: {parse(attack)}</Typography>\r\n              <Typography>Def: {parse(defence)}</Typography>\r\n              <Typography variant=\"h6\">\r\n                {nextRealm.tribulation\r\n                  ? `Tribulation stage: ${\r\n                      nextRealm.tribulation.stepReached || 0\r\n                    }/${nextRealm.tribulation.steps}`\r\n                  : \"\"}\r\n              </Typography>\r\n              <Typography variant=\"h6\">\r\n                {nextRealm.tribulation\r\n                  ? `Power multi: ${\r\n                      nextRealm.tribulation.stepReached\r\n                        ? parse(\r\n                            TotalTribulations.tribulationMulti *\r\n                              nextRealm.tribulation.multiplier **\r\n                                nextRealm.tribulation.stepReached\r\n                          )\r\n                        : 1\r\n                    }`\r\n                  : \"\"}\r\n              </Typography>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <Box marginY={theme.spacing(2)}>\r\n          <Button variant=\"outlined\" onClick={handleClick} size={\"large\"}>\r\n            {!isActive ? \"Breakthrough\" : \"Stop\"}\r\n          </Button>\r\n          {nextRealm.tribulation && !isActive && (\r\n            <Typography>\r\n              estim. stage{\" \"}\r\n              {calculateMaxTribulationStage({\r\n                player,\r\n                cultivationRealms,\r\n                nextRealmIndex,\r\n              })}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        <Box\r\n          border=\"1px solid gray\"\r\n          borderRadius={4}\r\n          display=\"flex\"\r\n          alignItems={\"center\"}\r\n          padding={theme.spacing(2)}\r\n          gap={theme.spacing(4)}\r\n        >\r\n          <Box>\r\n            <Typography>Health x {parse(currentPower.health)}</Typography>\r\n            <Typography>\r\n              Health regen x {parse(currentPower.healthRegen)}\r\n            </Typography>\r\n            <Typography>Attack x {parse(currentPower.attack)}</Typography>\r\n            <Typography>Defence x {parse(currentPower.defence)}</Typography>\r\n            <Typography>Insight x {parse(currentPower.insight)}</Typography>\r\n          </Box>\r\n          <ArrowForwardIcon fontSize={\"large\"} />\r\n          <Box>\r\n            <Typography>Health x {parse(nextPower.health)}</Typography>\r\n            <Typography>\r\n              Health regen x {parse(nextPower.healthRegen)}\r\n            </Typography>\r\n            <Typography>Attack x {parse(nextPower.attack)}</Typography>\r\n            <Typography>Defence x {parse(nextPower.defence)}</Typography>\r\n            <Typography>Insight x {parse(nextPower.insight)} </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Typography } from \"@mui/material\";\r\nimport { BasicGridCell, CropSquareImage } from \"Components\";\r\nimport { Activity } from \"GameConstants/Activities\";\r\nimport { CultivationManualType } from \"GameConstants/Items/CultivationManuals\";\r\nimport findItemDescription from \"GameConstants/utils/findItemDescription\";\r\n\r\ntype Props = {\r\n  width: number;\r\n  height: number;\r\n  item: CultivationManualType;\r\n};\r\n\r\nexport default function ManualCell(props: Props) {\r\n  const { width, height, item } = props;\r\n  const { image } = item;\r\n\r\n  return (\r\n    <Box\r\n      width={width}\r\n      height={height}\r\n      border=\"1px solid gray\"\r\n      display=\"flex\"\r\n      flexDirection=\"column\"\r\n      sx={{ justifyContent: \"space-around\", alignItems: \"center\" }}\r\n    >\r\n      <Box>\r\n        <img\r\n          src={image.path || \"/manuals/placeholder.png\"}\r\n          width=\"60px\"\r\n          height=\"auto\"\r\n          alt=\"\"\r\n        ></img>\r\n      </Box>\r\n      <Box maxWidth={width} overflow=\"auto\" whiteSpace={\"nowrap\"}>\r\n        <Typography>{item.name}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Button, Typography } from \"@mui/material\";\r\nimport ItemDescriptions from \"Components/shared/ItemDescriptions\";\r\nimport { CultivationManualType } from \"GameConstants/Items/CultivationManuals\";\r\nimport { PlayerContext, getStatName } from \"GameEngine\";\r\nimport React from \"react\";\r\n\r\nexport default function ManualTooltip(props) {\r\n  const manual: CultivationManualType = props.item;\r\n  const setShopItems = props.context;\r\n  const { manuals, inventory } = React.useContext(PlayerContext);\r\n  const { name, realm, stats, skills, maxLevel, price } = manual;\r\n  const parse = useNumberParser();\r\n\r\n  const buyManual = (manual) => {};\r\n  let description: Array<JSX.Element> = [];\r\n  if (stats)\r\n    for (const [key, value] of Object.entries(stats)) {\r\n      description.push(\r\n        <Typography key={key}>\r\n          {getStatName(key)}: {parse(value * 100) + \"%\"}\r\n        </Typography>\r\n      );\r\n    }\r\n  if (skills)\r\n    for (const [key, value] of Object.entries(skills)) {\r\n      description.push(\r\n        <Typography key={key}>\r\n          {getStatName(key)}: {parse(value * 100) + \"%\"}\r\n        </Typography>\r\n      );\r\n    }\r\n  return (\r\n    <Box border={1} p={2} bgcolor={\"background.paper\"}>\r\n      <Typography variant=\"h6\">{name}</Typography>\r\n      <Typography>{realm}</Typography>\r\n      <Typography>Max Level: {maxLevel}</Typography>\r\n      <Typography variant=\"h6\" marginY={1}>\r\n        Stats per Level:\r\n      </Typography>\r\n      {description}\r\n      <Typography variant=\"h6\">Price</Typography>\r\n      <ItemDescriptions items={price} />\r\n      <Button variant=\"contained\" onClick={buyManual}>\r\n        Buy\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n","import { Box } from \"@mui/material\";\r\nimport { ItemGrid } from \"Components\";\r\nimport { CultivationManuals } from \"GameConstants/Items/CultivationManuals\";\r\nimport React from \"react\";\r\nimport ManualCell from \"./ManualsShop/ManualCell\";\r\nimport ManualTooltip from \"./ManualsShop/ManualTooltip\";\r\n\r\nexport default function ManualsShop() {\r\n  const [shopItems, setShopItems] = React.useState(CultivationManuals);\r\n  return (\r\n    <Box>\r\n      <ItemGrid\r\n        cellWidth={100}\r\n        cellHeight={100}\r\n        sizeX={5}\r\n        sizeY={5}\r\n        items={shopItems}\r\n        Cell={ManualCell}\r\n        Tooltip={ManualTooltip}\r\n        context={setShopItems}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n","import { Box, Button, Paper } from \"@mui/material\";\r\nimport ManualsShop from \"./ShopsPage/ManualsShop\";\r\nimport {\r\n  useContentSelector,\r\n  useWindowDimensions,\r\n} from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\nconst shops = {\r\n  Manuals: <ManualsShop />,\r\n};\r\n\r\nexport default function ShopsPage() {\r\n  const { state, states, setState, Content } = useContentSelector(\r\n    \"Manuals\",\r\n    shops\r\n  );\r\n  return (\r\n    <Box>\r\n      <ShopsMenu state={state} states={states} setState={setState} />\r\n      <Content />\r\n    </Box>\r\n  );\r\n}\r\n\r\nconst ShopsMenu = (props: {\r\n  state: string;\r\n  states: string[];\r\n  setState: (item: any) => void;\r\n}) => {\r\n  const { state, states, setState } = props;\r\n  const { width } = useWindowDimensions();\r\n\r\n  return (\r\n    <Paper elevation={2}>\r\n      <Box width={width - 512}>\r\n        {states.map((item) => (\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n            color={state === item ? \"info\" : \"primary\"}\r\n            onClick={() => setState(item)}\r\n            sx={{ margin: 2 }}\r\n            key={item}\r\n          >\r\n            {item}\r\n          </Button>\r\n        ))}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import {\r\n  useWindowDimensions,\r\n  useContentSelector,\r\n  getSpacing,\r\n} from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { Box, Button, Paper, useTheme } from \"@mui/material\";\r\nimport ActivityCard from \"Components/ActivityCards/Activity\";\r\nimport GatheringActivityCard from \"Components/ActivityCards/GatheringActivity\";\r\nimport { PlayerContext, GameContext } from \"GameEngine\";\r\nimport ActionsPage from \"Pages/ActionsPage\";\r\nimport CraftingPage from \"Pages/CraftingPage\";\r\nimport FightingPage from \"Pages/FightingPage\";\r\nimport ManualsPage from \"Pages/ManualsPage\";\r\nimport RealmBreakthroughPage from \"Pages/RealmBreakthroughPage\";\r\nimport breakthroughSuccess from \"Pages/RealmBreakthroughPage/breakthroughSuccess\";\r\nimport ShopsPage from \"Pages/ShopsPage\";\r\n\r\nimport React from \"react\";\r\n\r\nexport type State = { [key: string]: () => JSX.Element };\r\n\r\nexport const states = {\r\n  Training: <ActionsPage source={\"trainings\"} Card={ActivityCard} />,\r\n  Manuals: <ManualsPage />,\r\n  Breakthrough: <RealmBreakthroughPage />,\r\n  Mining: <ActionsPage source={\"mining\"} Card={GatheringActivityCard} />,\r\n  Crafting: <CraftingPage />,\r\n  Gathering: <ActionsPage source={\"gathering\"} Card={GatheringActivityCard} />,\r\n  Fighting: <FightingPage />,\r\n  Shops: <ShopsPage />,\r\n};\r\n\r\nexport const MainWindow = (props: { states: Record<string, JSX.Element> }) => {\r\n  const { width, height } = useWindowDimensions();\r\n  const theme = useTheme();\r\n  const { state, setState, states, Content } = useContentSelector(\r\n    \"Training\",\r\n    props.states\r\n  );\r\n  return (\r\n    <Box width={width - 512} height={height - getSpacing(theme, 8)}>\r\n      <Menu state={state} setState={setState} states={states} />\r\n      {state && <Content />}\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Menu = (props: {\r\n  state: string;\r\n  states: string[];\r\n  setState: (item: any) => void;\r\n}) => {\r\n  const { state, states, setState } = props;\r\n  const { width } = useWindowDimensions();\r\n  const player = React.useContext(PlayerContext);\r\n  const { cultivationRealms } = React.useContext(GameContext);\r\n  // For the breakthrough custom button color\r\n  const canBreakthrough = breakthroughSuccess(\r\n    player,\r\n    cultivationRealms[player.realm.index + 1]\r\n  );\r\n\r\n  function buttonColor(page, item): any {\r\n    let color = \"primary\";\r\n    if (page === item) color = \"success\";\r\n    if (canBreakthrough && item === \"Breakthrough\") color = \"warning\";\r\n    return color;\r\n  }\r\n  return (\r\n    <Paper elevation={2}>\r\n      <Box width={width - 512}>\r\n        {states.map((item) => (\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"large\"\r\n            color={buttonColor(state, item)}\r\n            onClick={() => setState(item)}\r\n            sx={{ margin: 2 }}\r\n            key={item}\r\n          >\r\n            {item}\r\n          </Button>\r\n        ))}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n};\r\n","import { Box, Paper, Typography, useTheme } from \"@mui/material\";\r\nimport ProgressBar from \"../shared/ProgressBar\";\r\nimport React from \"react\";\r\nimport parseTime from \"Utils/parseTime\";\r\nimport { ActivityCardProps } from \"./types\";\r\nimport { PlayerContext } from \"GameEngine\";\r\nimport { ActivitiesFunctions } from \"GameConstants/Activities\";\r\nimport { defaultUpdateInterval } from \"GameConstants/Constants\";\r\nimport ActivityStatsDescription from \"Components/shared/ActivityStatsDescription\";\r\nimport { useNumberParser } from \"@SoulDancer27/idle-rpg-lib\";\r\n\r\n// Generic activity panel without decorations suitable for any activity\r\nexport default function ActivityCard(props: ActivityCardProps) {\r\n  const { activity, isActive, source, showTimesCompleted } = props;\r\n  const player = React.useContext(PlayerContext);\r\n  const parse = useNumberParser();\r\n  const { updateContext } = player;\r\n  const { result, price } = activity;\r\n  const theme = useTheme();\r\n\r\n  // Handle click on activity card\r\n  const handleClick = () => {\r\n    // If activity is active on click, set character state.action to 'idle' (i.e. deactivate training)\r\n    if (isActive)\r\n      updateContext({\r\n        state: {\r\n          action: \"idle\",\r\n          activity: undefined,\r\n        },\r\n      });\r\n    // If activity is not active on click, set character state.action to 'activity' (i.e. activate training)\r\n    else {\r\n      updateContext({\r\n        state: {\r\n          action: \"activity\",\r\n          activity: { name: activity.name, source },\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  // Object to display the result description for item rewards\r\n  const ItemRewardDescription: ItemLine[] = [];\r\n\r\n  // If the activity result includes items\r\n  if (result.items) {\r\n    // For every item in the result object, push the item name and quantity to the ItemRewardDescription array for display\r\n    for (let item of result.items) {\r\n      ItemRewardDescription.push({\r\n        name: item.name,\r\n        amount: item.amount,\r\n      });\r\n    }\r\n  }\r\n  // Object to display the result description for item prices / costs of the activity\r\n  const ItemPriceDescription: ItemLine[] = [];\r\n\r\n  // If the activity price includes items\r\n  if (price?.items) {\r\n    // For every item in the price object, push the item name and quantity to the ItemPriceDescription array for display\r\n    for (let item of price.items) {\r\n      ItemPriceDescription.push({\r\n        name: item.name,\r\n        amount: item.amount,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Determine remaining time for timed activities\r\n  const requiredTime = activity.time\r\n    ? ActivitiesFunctions[activity.time](activity, player)\r\n    : activity.baseTime;\r\n\r\n  const currentTime = activity.currentTime || 0;\r\n\r\n  // Change some displayed effects if action is really fast\r\n  // Action is a 'fast action' if it takes less than 5 update intervals to complete\r\n  const fastAction = requiredTime / defaultUpdateInterval < 5;\r\n\r\n  // Adding text to the progress bar label:\r\n  // If action takes less than 1000ms to complete, display the amount of actions completed per second\r\n  // Else, display the amount of time required to complete the action in ms\r\n  const progressBarLabel =\r\n    requiredTime < 1000\r\n      ? (1000 / requiredTime).toFixed(2) + \"/s\"\r\n      : parseTime(requiredTime);\r\n\r\n  return (\r\n    <Paper\r\n      elevation={8}\r\n      sx={{\r\n        paddingX: theme.spacing(2),\r\n        paddingY: theme.spacing(1),\r\n        margin: theme.spacing(2),\r\n        borderRadius: theme.spacing(2),\r\n        minHeight: 60,\r\n        border: \"1px solid lightgray\",\r\n        borderColor: isActive ? theme.palette.primary.main : \"lightgray\",\r\n        padding: theme.spacing(1),\r\n      }}\r\n    >\r\n      <Box display={\"flex\"}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection={\"column\"}\r\n          justifyContent={\"space-between\"}\r\n          minWidth={price ? 400 : 600}\r\n          minHeight={60}\r\n          height=\"100%\"\r\n          onClick={() => handleClick()}\r\n        >\r\n          <Box display=\"flex\">\r\n            <Box display=\"flex\" flexDirection={\"column\"}>\r\n              <Typography>{activity.name}</Typography>\r\n              {/* Display for rewarded stats */}\r\n              {/* If baseStats are rewarded: Display a list of the stats and their exp quantities */}\r\n              {/* Per baseStat: If required time to complete is greater than 1s, show exp gained per completion. Else, show exp gained divided by required time multiplied by 1000 */}\r\n              {activity.result.baseStats && (\r\n                <ActivityStatsDescription\r\n                  stats={activity.result.baseStats}\r\n                  activity={activity}\r\n                  requiredTime={requiredTime}\r\n                  multiplicatorFunctionName={activity.result.baseStatsMulti}\r\n                />\r\n              )}\r\n\r\n              {/* Display for rewarded items */}\r\n              {/* If items are rewarded: Display a list of the items and their quantities */}\r\n              {ItemRewardDescription.length > 0 && (\r\n                <Box display=\"flex\" gap={theme.spacing(1)}>\r\n                  {ItemRewardDescription.map((item) => (\r\n                    <Typography\r\n                      key={item.name}\r\n                      variant=\"body1\"\r\n                      display=\"inline\"\r\n                    >\r\n                      {item.name} {parse(item.amount)}\r\n                    </Typography>\r\n                  ))}\r\n                </Box>\r\n              )}\r\n              {/* Display for rewarded skills */}\r\n              {/* If skills are rewarded: Display a list of the skills and their rewarded exp */}\r\n              {/* Per skill: If the required time for activity completion is greater than 1s, show the rewarded exp per completion. Else, show the rewarded exp divided by required time to complete and multiplied by 1000 */}\r\n              {activity.result.skills && (\r\n                <ActivityStatsDescription\r\n                  stats={activity.result.skills}\r\n                  activity={activity}\r\n                  requiredTime={requiredTime}\r\n                  multiplicatorFunctionName={activity.result.skillsMulti}\r\n                />\r\n              )}\r\n            </Box>\r\n            {showTimesCompleted && (\r\n              <Box marginLeft=\"auto\">\r\n                <Typography>\r\n                  {activity.timesCompleted && activity.timesCompleted > 10000\r\n                    ? parse(activity.timesCompleted)\r\n                    : activity.timesCompleted}\r\n                </Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n          {/* The progress bar of the activity card */}\r\n          <Box>\r\n            {/* Value of the progress bar is 100 (i.e. complete) if the action is marked 'fast' and is active, otherwise it's the percentage of the current time out of the required time */}\r\n            <ProgressBar\r\n              value={\r\n                fastAction && isActive\r\n                  ? 100\r\n                  : (currentTime / requiredTime) * 100\r\n              }\r\n              label={progressBarLabel}\r\n              rightLabel\r\n            />\r\n          </Box>\r\n        </Box>\r\n        {price && (\r\n          <Box\r\n            borderLeft=\"1px solid gray\"\r\n            paddingLeft={theme.spacing(2)}\r\n            minWidth={200}\r\n            minHeight={60}\r\n          >\r\n            <Typography>Price</Typography>\r\n            {activity.price?.baseStats && (\r\n              <ActivityStatsDescription\r\n                stats={activity.price.baseStats}\r\n                activity={activity}\r\n              />\r\n            )}\r\n\r\n            <Box display=\"flex\" gap={theme.spacing(1)}>\r\n              {ItemPriceDescription.map((item) => (\r\n                <Typography key={item.name} variant=\"body1\" display=\"inline\">\r\n                  {item.name} {parse(item.amount)}\r\n                </Typography>\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </Paper>\r\n  );\r\n}\r\n\r\n// Object to contain name and quantity of items\r\ntype ItemLine = {\r\n  name: string;\r\n  amount: number;\r\n};\r\n","import { CultivationRealm } from \"GameConstants/Cultivation/CultivationRealms\";\r\nimport { PlayerContextType } from \"GameConstants/Interfaces\";\r\n\r\nimport {\r\n  BreakthroughDps,\r\n  TribulationDps,\r\n} from \"GameConstants/Cultivation/CultivationRealms\";\r\n\r\nexport default function breakthroughSuccess(\r\n  player: PlayerContextType,\r\n  realm: CultivationRealm | undefined\r\n) {\r\n  if (!realm) return false;\r\n  const playerDps = BreakthroughDps(player, realm.baseStats);\r\n  const realmDps = TribulationDps(\r\n    realm.currentStats || realm.baseStats,\r\n    player\r\n  );\r\n  const time = realm.baseStats.health / playerDps;\r\n  return player.currentStats.health > realmDps * time;\r\n}\r\n","import { Box, CssBaseline, ThemeProvider, useTheme } from \"@mui/material\";\r\nimport LightTheme from \"Themes/LightTheme\";\r\nimport GameRuntime from \"GameEngine/GameRuntime\";\r\nimport TopBar from \"Components/TopBar\";\r\nimport useWindowDimensions, {\r\n  getWindowDimensions,\r\n} from \"Utils/useWindowDimensions\";\r\nimport LeftSideBar from \"Components/LeftSideBar\";\r\nimport React from \"react\";\r\nimport { ContextManagerProps, SettingsPage } from \"@SoulDancer27/idle-rpg-lib\";\r\nimport { MainWindow, states } from \"Components/shared/useComponentSelector\";\r\nimport {\r\n  DataManager,\r\n  SettingsContext,\r\n  settingsContextDefault,\r\n  GameRuntime as Test,\r\n  useAgeManager,\r\n} from \"@SoulDancer27/idle-rpg-lib\";\r\nimport PlayerContext, { playerContext } from \"GameEngine/Player/PlayerContext\";\r\nimport { GameContext } from \"GameEngine\";\r\n\r\nimport { gameContent } from \"GameConstants/GameContent\";\r\nimport { PlayerContextType } from \"GameConstants/Interfaces\";\r\n\r\nexport default function App() {\r\n  // Re-render page on innerWidth and innerHeight change\r\n  useWindowDimensions();\r\n  const { width, height } = getWindowDimensions();\r\n  const [settings, setSettings] = React.useState<boolean>(false);\r\n\r\n  return (\r\n    <CssBaseline>\r\n      <ThemeProvider theme={LightTheme}>\r\n        <DataManager data={appData}>\r\n          <GameRuntime>\r\n            <Box width={width} height={height} overflow=\"hidden\">\r\n              <TopBar setSettings={setSettings} />\r\n              {settings && (\r\n                <SettingsPage setOpened={setSettings} data={appData} />\r\n              )}\r\n              {!settings && (\r\n                <Box display=\"flex\">\r\n                  <LeftSideBar />\r\n                  <MainWindow states={states} />\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </GameRuntime>\r\n        </DataManager>\r\n      </ThemeProvider>\r\n    </CssBaseline>\r\n  );\r\n}\r\n\r\nconst managers = [\r\n  { hook: useAgeManager, context: { PlayerContext: PlayerContext } },\r\n];\r\n\r\nconst appData: ContextManagerProps<any>[] = [\r\n  {\r\n    Context: SettingsContext,\r\n    defaultContextValue: settingsContextDefault,\r\n    cookies: [\r\n      {\r\n        key: \"tickRate\",\r\n        cookieName: \"tickrate\",\r\n        type: \"number\",\r\n      },\r\n      { key: \"gameSpeed\", cookieName: \"gamespeed\", type: \"number\" },\r\n      { key: \"notation\", cookieName: \"notation\" },\r\n    ],\r\n  },\r\n  {\r\n    Context: PlayerContext,\r\n    defaultContextValue: playerContext,\r\n    localStorageName: \"player\",\r\n  },\r\n  {\r\n    Context: GameContext,\r\n    defaultContextValue: gameContent,\r\n    localStorageName: \"game\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\n// Entry point\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}